// $ANTLR 3.4 D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g 2014-06-27 13:47:16

package cd.parser; // include any import statements that are required by your action code

/// CD1_A2sol - END {
import java.util.ArrayList;
/// }
import java.util.List;

import org.antlr.runtime.BitSet;
import org.antlr.runtime.EarlyExitException;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.antlr.runtime.tree.CommonTree;
import org.antlr.runtime.tree.TreeNodeStream;
import org.antlr.runtime.tree.TreeParser;
import org.antlr.runtime.tree.TreeRuleReturnScope;

/// }
import cd.exceptions.ParseFailure;
import cd.ir.Ast;
import cd.ir.Ast.Assign;
import cd.ir.Ast.BinaryOp;
import cd.ir.Ast.BinaryOp.BOp;
import cd.ir.Ast.BooleanConst;
import cd.ir.Ast.BuiltInRead;
import cd.ir.Ast.BuiltInReadFloat;
import cd.ir.Ast.BuiltInWrite;
import cd.ir.Ast.BuiltInWriteFloat;
import cd.ir.Ast.BuiltInWriteln;
import cd.ir.Ast.Cast;
import cd.ir.Ast.ClassDecl;
import cd.ir.Ast.Decl;
import cd.ir.Ast.Expr;
import cd.ir.Ast.Field;
import cd.ir.Ast.FloatConst;
import cd.ir.Ast.IfElse;
import cd.ir.Ast.Index;
import cd.ir.Ast.IntConst;
import cd.ir.Ast.MethodCall;
import cd.ir.Ast.MethodCallExpr;
import cd.ir.Ast.MethodDecl;
import cd.ir.Ast.NewArray;
import cd.ir.Ast.NewObject;
import cd.ir.Ast.Nop;
import cd.ir.Ast.NullConst;
import cd.ir.Ast.ReturnStmt;
import cd.ir.Ast.Seq;
import cd.ir.Ast.Stmt;
import cd.ir.Ast.ThisRef;
import cd.ir.Ast.UnaryOp;
/// CD1_A2sol - END {
import cd.ir.Ast.UnaryOp.UOp;
import cd.ir.Ast.Var;
import cd.ir.Ast.VarDecl;
import cd.ir.Ast.WhileLoop;
import cd.util.Pair;

/**************************************************************************************************
 *   JAVALI TREE GRAMMAR
 *   Compiler Construction I
 *
 *   ABOUT:
 *   -------
 *   
 *   A tree grammar takes as input the ANTLR AST generated by the rewriting rules of the parser grammar
 *   and generates a visitor that visits the ANTLR AST and issues the action code associated with the tree
 *   grammar rule. We use the tree grammar for generating the Javali AST (i.e., AST whose nodes are
 *   instances of cd.ir.Ast.java). Thus, we invoke the appropriate Javali AST constructors in the action
 *   code associated with the tree grammar rules.
 *
 *   The rewriting rules of the parser grammar are a good starting point for generating the tree grammar.
 *   The easiest way to generate a tree grammar is to start with the parser grammar (copy & paste) and to
 *   remove the grammar productions (left side of arrow), leaving only the rewriting rules (right side of arrow).
 *   Note, however, that the rewriting rules may have to be changed. For instance, imaginary tokens need no
 *   longer to be created, but can simply be referenced (i.e., brackets with token binding must be omitted).
 *   Also, variables must be replaced with the actual node that is visited. Most likely, the tree grammar
 *   will also become more condensed than the parser grammar since it can expect the parser grammar
 *   to pass on valid ANTLR ASTs only. For instance, the tree grammar does not need to encode
 *   operator precedences.
 *
**************************************************************************************************/
@SuppressWarnings({"all", "warnings", "unchecked"})
public class JavaliWalker extends TreeParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ArrayType", "Assign", "B_AND", "B_DIV", "B_EQUAL", "B_GREATER_OR_EQUAL", "B_GREATER_THAN", "B_LESS_OR_EQUAL", "B_LESS_THAN", "B_MINUS", "B_MOD", "B_NOT_EQUAL", "B_OR", "B_PLUS", "B_TIMES", "BinaryOp", "BooleanConst", "BooleanLiteral", "BuiltInRead", "BuiltInReadFloat", "BuiltInWrite", "BuiltInWriteFloat", "BuiltInWriteln", "COMMENT", "Cast", "ClassDecl", "DecimalIntConst", "DecimalNumber", "DigitNumber", "Field", "FloatConst", "FloatNumber", "HexDigit", "HexIntConst", "HexNumber", "HexPrefix", "Identifier", "IfElse", "Index", "JavaIDDigit", "LINE_COMMENT", "Letter", "MethodBody", "MethodCall", "MethodDecl", "NewArray", "NewObject", "Nop", "NullConst", "ReturnStmt", "Seq", "ThisRef", "U_BOOL_NOT", "U_MINUS", "U_PLUS", "UnaryOp", "Var", "VarDecl", "VarDeclList", "WS", "WhileLoop", "'!'", "'!='", "'%'", "'&&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "';'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "'['", "']'", "'boolean'", "'class'", "'else'", "'extends'", "'float'", "'if'", "'int'", "'new'", "'null'", "'read'", "'readf'", "'return'", "'this'", "'void'", "'while'", "'write'", "'writef'", "'writeln'", "'{'", "'||'", "'}'"
    };

    public static final int EOF=-1;
    public static final int T__65=65;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__70=70;
    public static final int T__71=71;
    public static final int T__72=72;
    public static final int T__73=73;
    public static final int T__74=74;
    public static final int T__75=75;
    public static final int T__76=76;
    public static final int T__77=77;
    public static final int T__78=78;
    public static final int T__79=79;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__84=84;
    public static final int T__85=85;
    public static final int T__86=86;
    public static final int T__87=87;
    public static final int T__88=88;
    public static final int T__89=89;
    public static final int T__90=90;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__95=95;
    public static final int T__96=96;
    public static final int T__97=97;
    public static final int T__98=98;
    public static final int T__99=99;
    public static final int T__100=100;
    public static final int T__101=101;
    public static final int T__102=102;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int ArrayType=4;
    public static final int Assign=5;
    public static final int B_AND=6;
    public static final int B_DIV=7;
    public static final int B_EQUAL=8;
    public static final int B_GREATER_OR_EQUAL=9;
    public static final int B_GREATER_THAN=10;
    public static final int B_LESS_OR_EQUAL=11;
    public static final int B_LESS_THAN=12;
    public static final int B_MINUS=13;
    public static final int B_MOD=14;
    public static final int B_NOT_EQUAL=15;
    public static final int B_OR=16;
    public static final int B_PLUS=17;
    public static final int B_TIMES=18;
    public static final int BinaryOp=19;
    public static final int BooleanConst=20;
    public static final int BooleanLiteral=21;
    public static final int BuiltInRead=22;
    public static final int BuiltInReadFloat=23;
    public static final int BuiltInWrite=24;
    public static final int BuiltInWriteFloat=25;
    public static final int BuiltInWriteln=26;
    public static final int COMMENT=27;
    public static final int Cast=28;
    public static final int ClassDecl=29;
    public static final int DecimalIntConst=30;
    public static final int DecimalNumber=31;
    public static final int DigitNumber=32;
    public static final int Field=33;
    public static final int FloatConst=34;
    public static final int FloatNumber=35;
    public static final int HexDigit=36;
    public static final int HexIntConst=37;
    public static final int HexNumber=38;
    public static final int HexPrefix=39;
    public static final int Identifier=40;
    public static final int IfElse=41;
    public static final int Index=42;
    public static final int JavaIDDigit=43;
    public static final int LINE_COMMENT=44;
    public static final int Letter=45;
    public static final int MethodBody=46;
    public static final int MethodCall=47;
    public static final int MethodDecl=48;
    public static final int NewArray=49;
    public static final int NewObject=50;
    public static final int Nop=51;
    public static final int NullConst=52;
    public static final int ReturnStmt=53;
    public static final int Seq=54;
    public static final int ThisRef=55;
    public static final int U_BOOL_NOT=56;
    public static final int U_MINUS=57;
    public static final int U_PLUS=58;
    public static final int UnaryOp=59;
    public static final int Var=60;
    public static final int VarDecl=61;
    public static final int VarDeclList=62;
    public static final int WS=63;
    public static final int WhileLoop=64;

    // delegates
    public TreeParser[] getDelegates() {
        return new TreeParser[] {};
    }

    // delegators


    public JavaliWalker(TreeNodeStream input) {
        this(input, new RecognizerSharedState());
    }
    public JavaliWalker(TreeNodeStream input, RecognizerSharedState state) {
        super(input, state);
    }

    public String[] getTokenNames() { return JavaliWalker.tokenNames; }
    public String getGrammarFileName() { return "D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g"; }

     // incude any members that are required by your action code

    /// CD1_A2sol - END {
    	public <T> List<T> emptyList() {
    		return java.util.Collections.emptyList();
    	}
        
    	public Seq seq(List<? extends Ast>... members) {
    		Seq res = new Seq(null);
    		if (members != null) {
    			for (List<? extends Ast> lst : members)
    				res.rwChildren().addAll(lst);
    		}
    		return res;
    	}

    	public Integer intValue(String s, int radix, int line) {
    		try {
    			return Integer.valueOf(s, radix);
    		} catch (NumberFormatException e) {
    			throw new ParseFailure(line, "Illegal integer: " + s);
    		}
    	}
    	
    	public Float floatValue(String s, int line) {
    		try {
    			return Float.valueOf(s);
    		} catch (NumberFormatException e) {
    			throw new ParseFailure(line, "Illegal float: " + s);
    		}
    	}
    	
    /// }



    // $ANTLR start "unit"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:102:1: unit returns [List<ClassDecl> classDeclList] : (cl= classDecl )+ ;
    public final List<ClassDecl> unit() throws RecognitionException {
        List<ClassDecl> classDeclList = null;


        ClassDecl cl =null;



        	classDeclList = new ArrayList<ClassDecl>();

        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:106:2: ( (cl= classDecl )+ )
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:106:4: (cl= classDecl )+
            {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:106:4: (cl= classDecl )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==ClassDecl) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:106:6: cl= classDecl
            	    {
            	    pushFollow(FOLLOW_classDecl_in_unit75);
            	    cl=classDecl();

            	    state._fsp--;


            	     classDeclList.add(cl); 

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return classDeclList;
    }
    // $ANTLR end "unit"



    // $ANTLR start "classDecl"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:109:1: classDecl returns [ClassDecl node] : ^( ClassDecl clName= Identifier superName= Identifier (body= declList[memberDeclList] )? ) ;
    public final ClassDecl classDecl() throws RecognitionException {
        ClassDecl node = null;


        CommonTree clName=null;
        CommonTree superName=null;


        	ArrayList<Decl> memberDeclList = new ArrayList<Decl>();

        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:113:2: ( ^( ClassDecl clName= Identifier superName= Identifier (body= declList[memberDeclList] )? ) )
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:113:4: ^( ClassDecl clName= Identifier superName= Identifier (body= declList[memberDeclList] )? )
            {
            match(input,ClassDecl,FOLLOW_ClassDecl_in_classDecl102); 

            match(input, Token.DOWN, null); 
            clName=(CommonTree)match(input,Identifier,FOLLOW_Identifier_in_classDecl106); 

            superName=(CommonTree)match(input,Identifier,FOLLOW_Identifier_in_classDecl110); 

            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:113:60: (body= declList[memberDeclList] )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==MethodDecl||(LA2_0 >= VarDecl && LA2_0 <= VarDeclList)) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:113:60: body= declList[memberDeclList]
                    {
                    pushFollow(FOLLOW_declList_in_classDecl114);
                    declList(memberDeclList);

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


             node = new ClassDecl((clName!=null?clName.getText():null), (superName!=null?superName.getText():null), memberDeclList); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return node;
    }
    // $ANTLR end "classDecl"



    // $ANTLR start "declList"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:117:1: declList[List<Decl> members] : (v= varDecl[$members] |m= methodDecl )+ ;
    public final void declList(List<Decl> members) throws RecognitionException {
        MethodDecl m =null;


        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:118:2: ( (v= varDecl[$members] |m= methodDecl )+ )
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:118:4: (v= varDecl[$members] |m= methodDecl )+
            {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:118:4: (v= varDecl[$members] |m= methodDecl )+
            int cnt3=0;
            loop3:
            do {
                int alt3=3;
                int LA3_0 = input.LA(1);

                if ( ((LA3_0 >= VarDecl && LA3_0 <= VarDeclList)) ) {
                    alt3=1;
                }
                else if ( (LA3_0==MethodDecl) ) {
                    alt3=2;
                }


                switch (alt3) {
            	case 1 :
            	    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:118:6: v= varDecl[$members]
            	    {
            	    pushFollow(FOLLOW_varDecl_in_declList138);
            	    varDecl(members);

            	    state._fsp--;


            	    }
            	    break;
            	case 2 :
            	    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:118:28: m= methodDecl
            	    {
            	    pushFollow(FOLLOW_methodDecl_in_declList145);
            	    m=methodDecl();

            	    state._fsp--;


            	     members.add(m); 

            	    }
            	    break;

            	default :
            	    if ( cnt3 >= 1 ) break loop3;
                        EarlyExitException eee =
                            new EarlyExitException(3, input);
                        throw eee;
                }
                cnt3++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "declList"



    // $ANTLR start "varDecl"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:121:1: varDecl[List<Decl> members] : ( ^( VarDecl t= type n= Identifier ) | ^( VarDeclList t= type (n= Identifier )+ ) );
    public final void varDecl(List<Decl> members) throws RecognitionException {
        CommonTree n=null;
        String t =null;


        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:122:2: ( ^( VarDecl t= type n= Identifier ) | ^( VarDeclList t= type (n= Identifier )+ ) )
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==VarDecl) ) {
                alt5=1;
            }
            else if ( (LA5_0==VarDeclList) ) {
                alt5=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;

            }
            switch (alt5) {
                case 1 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:122:4: ^( VarDecl t= type n= Identifier )
                    {
                    match(input,VarDecl,FOLLOW_VarDecl_in_varDecl164); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_type_in_varDecl168);
                    t=type();

                    state._fsp--;


                    n=(CommonTree)match(input,Identifier,FOLLOW_Identifier_in_varDecl172); 

                    match(input, Token.UP, null); 


                     members.add(new VarDecl(t, (n!=null?n.getText():null))); 

                    }
                    break;
                case 2 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:124:4: ^( VarDeclList t= type (n= Identifier )+ )
                    {
                    match(input,VarDeclList,FOLLOW_VarDeclList_in_varDecl185); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_type_in_varDecl189);
                    t=type();

                    state._fsp--;


                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:124:26: (n= Identifier )+
                    int cnt4=0;
                    loop4:
                    do {
                        int alt4=2;
                        int LA4_0 = input.LA(1);

                        if ( (LA4_0==Identifier) ) {
                            alt4=1;
                        }


                        switch (alt4) {
                    	case 1 :
                    	    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:124:28: n= Identifier
                    	    {
                    	    n=(CommonTree)match(input,Identifier,FOLLOW_Identifier_in_varDecl195); 

                    	     members.add(new VarDecl(t, (n!=null?n.getText():null))); 

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt4 >= 1 ) break loop4;
                                EarlyExitException eee =
                                    new EarlyExitException(4, input);
                                throw eee;
                        }
                        cnt4++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "varDecl"



    // $ANTLR start "methodDecl"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:127:1: methodDecl returns [MethodDecl mth] : ^( MethodDecl head= methodHeading body= methodBody ) ;
    public final MethodDecl methodDecl() throws RecognitionException {
        MethodDecl mth = null;


        JavaliWalker.methodHeading_return head =null;

        JavaliWalker.methodBody_return body =null;


        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:128:4: ( ^( MethodDecl head= methodHeading body= methodBody ) )
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:128:6: ^( MethodDecl head= methodHeading body= methodBody )
            {
            match(input,MethodDecl,FOLLOW_MethodDecl_in_methodDecl221); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_methodHeading_in_methodDecl225);
            head=methodHeading();

            state._fsp--;


            pushFollow(FOLLOW_methodBody_in_methodDecl229);
            body=methodBody();

            state._fsp--;


            match(input, Token.UP, null); 


             mth = new MethodDecl((head!=null?head.returnType:null), (head!=null?head.mthName:null), (head!=null?head.formalParams:null), (body!=null?body.decls:null), (body!=null?body.stmts:null)); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return mth;
    }
    // $ANTLR end "methodDecl"


    public static class methodHeading_return extends TreeRuleReturnScope {
        public String returnType;
        public String mthName;
        public List<Pair<String>> formalParams;
    };


    // $ANTLR start "methodHeading"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:132:1: methodHeading returns [String returnType, String mthName, List<Pair<String>> formalParams] : (r= type n= Identifier |r= type n= Identifier formalParamList[$formalParams] );
    public final JavaliWalker.methodHeading_return methodHeading() throws RecognitionException {
        JavaliWalker.methodHeading_return retval = new JavaliWalker.methodHeading_return();
        retval.start = input.LT(1);


        CommonTree n=null;
        String r =null;


        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:133:4: (r= type n= Identifier |r= type n= Identifier formalParamList[$formalParams] )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==Identifier) ) {
                int LA6_1 = input.LA(2);

                if ( (LA6_1==Identifier) ) {
                    int LA6_3 = input.LA(3);

                    if ( (LA6_3==MethodBody) ) {
                        alt6=1;
                    }
                    else if ( (LA6_3==VarDecl) ) {
                        alt6=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 6, 3, input);

                        throw nvae;

                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA6_0==ArrayType) ) {
                int LA6_2 = input.LA(2);

                if ( (LA6_2==DOWN) ) {
                    int LA6_4 = input.LA(3);

                    if ( (LA6_4==Identifier) ) {
                        int LA6_7 = input.LA(4);

                        if ( (LA6_7==UP) ) {
                            int LA6_8 = input.LA(5);

                            if ( (LA6_8==Identifier) ) {
                                int LA6_3 = input.LA(6);

                                if ( (LA6_3==MethodBody) ) {
                                    alt6=1;
                                }
                                else if ( (LA6_3==VarDecl) ) {
                                    alt6=2;
                                }
                                else {
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 6, 3, input);

                                    throw nvae;

                                }
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 6, 8, input);

                                throw nvae;

                            }
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 6, 7, input);

                            throw nvae;

                        }
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 6, 4, input);

                        throw nvae;

                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 2, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }
            switch (alt6) {
                case 1 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:133:6: r= type n= Identifier
                    {
                    pushFollow(FOLLOW_type_in_methodHeading260);
                    r=type();

                    state._fsp--;


                    n=(CommonTree)match(input,Identifier,FOLLOW_Identifier_in_methodHeading264); 

                     retval.returnType = r; retval.mthName = (n!=null?n.getText():null); retval.formalParams = emptyList(); 

                    }
                    break;
                case 2 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:134:6: r= type n= Identifier formalParamList[$formalParams]
                    {
                    pushFollow(FOLLOW_type_in_methodHeading275);
                    r=type();

                    state._fsp--;


                    n=(CommonTree)match(input,Identifier,FOLLOW_Identifier_in_methodHeading279); 

                     retval.returnType = r; retval.mthName = (n!=null?n.getText():null); retval.formalParams = new ArrayList<Pair<String>>(); 

                    pushFollow(FOLLOW_formalParamList_in_methodHeading283);
                    formalParamList(retval.formalParams);

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "methodHeading"



    // $ANTLR start "formalParamList"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:137:1: formalParamList[List<Pair<String>> formalParams] : ( ^( VarDecl t= type n= Identifier ) )+ ;
    public final void formalParamList(List<Pair<String>> formalParams) throws RecognitionException {
        CommonTree n=null;
        String t =null;


        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:138:2: ( ( ^( VarDecl t= type n= Identifier ) )+ )
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:138:4: ( ^( VarDecl t= type n= Identifier ) )+
            {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:138:4: ( ^( VarDecl t= type n= Identifier ) )+
            int cnt7=0;
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==VarDecl) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:138:6: ^( VarDecl t= type n= Identifier )
            	    {
            	    match(input,VarDecl,FOLLOW_VarDecl_in_formalParamList302); 

            	    match(input, Token.DOWN, null); 
            	    pushFollow(FOLLOW_type_in_formalParamList306);
            	    t=type();

            	    state._fsp--;


            	    n=(CommonTree)match(input,Identifier,FOLLOW_Identifier_in_formalParamList310); 

            	    match(input, Token.UP, null); 


            	     formalParams.add(new Pair<String>(t, (n!=null?n.getText():null))); 

            	    }
            	    break;

            	default :
            	    if ( cnt7 >= 1 ) break loop7;
                        EarlyExitException eee =
                            new EarlyExitException(7, input);
                        throw eee;
                }
                cnt7++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "formalParamList"


    public static class methodBody_return extends TreeRuleReturnScope {
        public Seq decls;
        public Seq stmts;
    };


    // $ANTLR start "methodBody"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:141:1: methodBody returns [Seq decls, Seq stmts] : ^( MethodBody declL= methodBodyWithDeclList ^( Seq (stmtL= stmtList )? ) ) ;
    public final JavaliWalker.methodBody_return methodBody() throws RecognitionException {
        JavaliWalker.methodBody_return retval = new JavaliWalker.methodBody_return();
        retval.start = input.LT(1);


        List<Decl> declL =null;

        List<Stmt> stmtL =null;



        	retval.decls = seq(); retval.stmts = seq();

        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:145:2: ( ^( MethodBody declL= methodBodyWithDeclList ^( Seq (stmtL= stmtList )? ) ) )
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:145:4: ^( MethodBody declL= methodBodyWithDeclList ^( Seq (stmtL= stmtList )? ) )
            {
            match(input,MethodBody,FOLLOW_MethodBody_in_methodBody338); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_methodBodyWithDeclList_in_methodBody342);
            declL=methodBodyWithDeclList();

            state._fsp--;


             retval.decls = seq(declL); 

            match(input,Seq,FOLLOW_Seq_in_methodBody348); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:145:85: (stmtL= stmtList )?
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==Assign||(LA8_0 >= BuiltInWrite && LA8_0 <= BuiltInWriteln)||LA8_0==Field||(LA8_0 >= IfElse && LA8_0 <= Index)||LA8_0==MethodCall||LA8_0==ReturnStmt||LA8_0==ThisRef||LA8_0==Var||LA8_0==WhileLoop) ) {
                    alt8=1;
                }
                switch (alt8) {
                    case 1 :
                        // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:145:86: stmtL= stmtList
                        {
                        pushFollow(FOLLOW_stmtList_in_methodBody353);
                        stmtL=stmtList();

                        state._fsp--;


                         retval.stmts = seq(stmtL); 

                        }
                        break;

                }


                match(input, Token.UP, null); 
            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "methodBody"



    // $ANTLR start "methodBodyWithDeclList"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:148:1: methodBodyWithDeclList returns [List<Decl> vars] : ^( Seq ( declList[$vars] )? ) ;
    public final List<Decl> methodBodyWithDeclList() throws RecognitionException {
        List<Decl> vars = null;



        	vars = new ArrayList<Decl>();

        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:152:2: ( ^( Seq ( declList[$vars] )? ) )
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:152:4: ^( Seq ( declList[$vars] )? )
            {
            match(input,Seq,FOLLOW_Seq_in_methodBodyWithDeclList383); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:152:11: ( declList[$vars] )?
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( (LA9_0==MethodDecl||(LA9_0 >= VarDecl && LA9_0 <= VarDeclList)) ) {
                    alt9=1;
                }
                switch (alt9) {
                    case 1 :
                        // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:152:11: declList[$vars]
                        {
                        pushFollow(FOLLOW_declList_in_methodBodyWithDeclList385);
                        declList(vars);

                        state._fsp--;


                        }
                        break;

                }


                match(input, Token.UP, null); 
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return vars;
    }
    // $ANTLR end "methodBodyWithDeclList"



    // $ANTLR start "stmtList"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:157:1: stmtList returns [List<Stmt> stmtList] : (s= stmt )+ ;
    public final List<Stmt> stmtList() throws RecognitionException {
        List<Stmt> stmtList = null;


        Stmt s =null;



        	stmtList = new ArrayList<Stmt>();

        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:161:2: ( (s= stmt )+ )
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:161:4: (s= stmt )+
            {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:161:4: (s= stmt )+
            int cnt10=0;
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);

                if ( (LA10_0==Assign||(LA10_0 >= BuiltInWrite && LA10_0 <= BuiltInWriteln)||LA10_0==Field||(LA10_0 >= IfElse && LA10_0 <= Index)||LA10_0==MethodCall||LA10_0==ReturnStmt||LA10_0==ThisRef||LA10_0==Var||LA10_0==WhileLoop) ) {
                    alt10=1;
                }


                switch (alt10) {
            	case 1 :
            	    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:161:6: s= stmt
            	    {
            	    pushFollow(FOLLOW_stmt_in_stmtList415);
            	    s=stmt();

            	    state._fsp--;


            	     stmtList.add(s); 

            	    }
            	    break;

            	default :
            	    if ( cnt10 >= 1 ) break loop10;
                        EarlyExitException eee =
                            new EarlyExitException(10, input);
                        throw eee;
                }
                cnt10++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return stmtList;
    }
    // $ANTLR end "stmtList"



    // $ANTLR start "stmt"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:164:1: stmt returns [Stmt stmt] : (a= assignmentOrMethodCall | ^( BuiltInWrite e= expr ) | ^( BuiltInWriteFloat e= expr ) | BuiltInWriteln | ^( IfElse cond= expr thenB= stmtBlock elseB= ifStmtTail ) | ^( WhileLoop cond= expr body= stmtBlock ) | ^( ReturnStmt (e= expr )? ) );
    public final Stmt stmt() throws RecognitionException {
        Stmt stmt = null;


        Stmt a =null;

        Expr e =null;

        Expr cond =null;

        Seq thenB =null;

        Ast elseB =null;

        Seq body =null;


        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:165:2: (a= assignmentOrMethodCall | ^( BuiltInWrite e= expr ) | ^( BuiltInWriteFloat e= expr ) | BuiltInWriteln | ^( IfElse cond= expr thenB= stmtBlock elseB= ifStmtTail ) | ^( WhileLoop cond= expr body= stmtBlock ) | ^( ReturnStmt (e= expr )? ) )
            int alt12=7;
            switch ( input.LA(1) ) {
            case Assign:
            case Field:
            case Index:
            case MethodCall:
            case ThisRef:
            case Var:
                {
                alt12=1;
                }
                break;
            case BuiltInWrite:
                {
                alt12=2;
                }
                break;
            case BuiltInWriteFloat:
                {
                alt12=3;
                }
                break;
            case BuiltInWriteln:
                {
                alt12=4;
                }
                break;
            case IfElse:
                {
                alt12=5;
                }
                break;
            case WhileLoop:
                {
                alt12=6;
                }
                break;
            case ReturnStmt:
                {
                alt12=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;

            }

            switch (alt12) {
                case 1 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:165:4: a= assignmentOrMethodCall
                    {
                    pushFollow(FOLLOW_assignmentOrMethodCall_in_stmt437);
                    a=assignmentOrMethodCall();

                    state._fsp--;


                     stmt = a; 

                    }
                    break;
                case 2 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:167:4: ^( BuiltInWrite e= expr )
                    {
                    match(input,BuiltInWrite,FOLLOW_BuiltInWrite_in_stmt448); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expr_in_stmt452);
                    e=expr();

                    state._fsp--;


                    match(input, Token.UP, null); 


                     stmt = new BuiltInWrite(e); 

                    }
                    break;
                case 3 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:169:6: ^( BuiltInWriteFloat e= expr )
                    {
                    match(input,BuiltInWriteFloat,FOLLOW_BuiltInWriteFloat_in_stmt467); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expr_in_stmt471);
                    e=expr();

                    state._fsp--;


                    match(input, Token.UP, null); 


                     stmt = new BuiltInWriteFloat(e); 

                    }
                    break;
                case 4 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:171:4: BuiltInWriteln
                    {
                    match(input,BuiltInWriteln,FOLLOW_BuiltInWriteln_in_stmt487); 

                     stmt = new BuiltInWriteln(); 

                    }
                    break;
                case 5 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:173:4: ^( IfElse cond= expr thenB= stmtBlock elseB= ifStmtTail )
                    {
                    match(input,IfElse,FOLLOW_IfElse_in_stmt498); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expr_in_stmt502);
                    cond=expr();

                    state._fsp--;


                    pushFollow(FOLLOW_stmtBlock_in_stmt506);
                    thenB=stmtBlock();

                    state._fsp--;


                    pushFollow(FOLLOW_ifStmtTail_in_stmt510);
                    elseB=ifStmtTail();

                    state._fsp--;


                    match(input, Token.UP, null); 


                     stmt = new IfElse(cond, thenB, elseB); 

                    }
                    break;
                case 6 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:175:4: ^( WhileLoop cond= expr body= stmtBlock )
                    {
                    match(input,WhileLoop,FOLLOW_WhileLoop_in_stmt523); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expr_in_stmt527);
                    cond=expr();

                    state._fsp--;


                    pushFollow(FOLLOW_stmtBlock_in_stmt531);
                    body=stmtBlock();

                    state._fsp--;


                    match(input, Token.UP, null); 


                     stmt = new WhileLoop(cond, body); 

                    }
                    break;
                case 7 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:177:6: ^( ReturnStmt (e= expr )? )
                    {
                    match(input,ReturnStmt,FOLLOW_ReturnStmt_in_stmt546); 

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); 
                        // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:177:21: (e= expr )?
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( ((LA11_0 >= BinaryOp && LA11_0 <= BooleanConst)||LA11_0==Cast||LA11_0==DecimalIntConst||(LA11_0 >= Field && LA11_0 <= FloatConst)||LA11_0==HexIntConst||LA11_0==Index||LA11_0==MethodCall||LA11_0==NullConst||LA11_0==ThisRef||(LA11_0 >= UnaryOp && LA11_0 <= Var)) ) {
                            alt11=1;
                        }
                        switch (alt11) {
                            case 1 :
                                // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:177:21: e= expr
                                {
                                pushFollow(FOLLOW_expr_in_stmt550);
                                e=expr();

                                state._fsp--;


                                }
                                break;

                        }


                        match(input, Token.UP, null); 
                    }


                     stmt = new ReturnStmt(e); 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return stmt;
    }
    // $ANTLR end "stmt"



    // $ANTLR start "assignmentOrMethodCall"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:181:1: assignmentOrMethodCall returns [Stmt assigOrMthCall] : (a= assignmentTail |i= identAccess );
    public final Stmt assignmentOrMethodCall() throws RecognitionException {
        Stmt assigOrMthCall = null;


        Assign a =null;

        Expr i =null;


        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:182:2: (a= assignmentTail |i= identAccess )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==Assign) ) {
                alt13=1;
            }
            else if ( (LA13_0==Field||LA13_0==Index||LA13_0==MethodCall||LA13_0==ThisRef||LA13_0==Var) ) {
                alt13=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }
            switch (alt13) {
                case 1 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:182:4: a= assignmentTail
                    {
                    pushFollow(FOLLOW_assignmentTail_in_assignmentOrMethodCall579);
                    a=assignmentTail();

                    state._fsp--;


                     assigOrMthCall = a; 

                    }
                    break;
                case 2 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:184:4: i= identAccess
                    {
                    pushFollow(FOLLOW_identAccess_in_assignmentOrMethodCall590);
                    i=identAccess();

                    state._fsp--;


                     
                    		   
                    		   if (i instanceof MethodCallExpr) {
                    		      assigOrMthCall = new MethodCall((MethodCallExpr) i);    
                    		   } else {
                    		      throw new ParseFailure(-1, "Illegal expression as statement: " + i);
                    		   }
                    		   
                    		

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return assigOrMthCall;
    }
    // $ANTLR end "assignmentOrMethodCall"



    // $ANTLR start "assignmentRHS"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:196:1: assignmentRHS returns [Expr expr] : (e= expr |n= newExpr |r= readExpr |f= readExprFloat );
    public final Expr assignmentRHS() throws RecognitionException {
        Expr expr = null;


        Expr e =null;

        Expr n =null;

        BuiltInRead r =null;

        BuiltInReadFloat f =null;


        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:197:2: (e= expr |n= newExpr |r= readExpr |f= readExprFloat )
            int alt14=4;
            switch ( input.LA(1) ) {
            case BinaryOp:
            case BooleanConst:
            case Cast:
            case DecimalIntConst:
            case Field:
            case FloatConst:
            case HexIntConst:
            case Index:
            case MethodCall:
            case NullConst:
            case ThisRef:
            case UnaryOp:
            case Var:
                {
                alt14=1;
                }
                break;
            case NewArray:
            case NewObject:
                {
                alt14=2;
                }
                break;
            case BuiltInRead:
                {
                alt14=3;
                }
                break;
            case BuiltInReadFloat:
                {
                alt14=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }

            switch (alt14) {
                case 1 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:197:4: e= expr
                    {
                    pushFollow(FOLLOW_expr_in_assignmentRHS619);
                    e=expr();

                    state._fsp--;


                     expr = e; 

                    }
                    break;
                case 2 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:199:4: n= newExpr
                    {
                    pushFollow(FOLLOW_newExpr_in_assignmentRHS630);
                    n=newExpr();

                    state._fsp--;


                     expr = n; 

                    }
                    break;
                case 3 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:201:4: r= readExpr
                    {
                    pushFollow(FOLLOW_readExpr_in_assignmentRHS641);
                    r=readExpr();

                    state._fsp--;


                     expr = r; 

                    }
                    break;
                case 4 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:203:4: f= readExprFloat
                    {
                    pushFollow(FOLLOW_readExprFloat_in_assignmentRHS652);
                    f=readExprFloat();

                    state._fsp--;


                     expr = f; 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "assignmentRHS"



    // $ANTLR start "assignmentTail"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:207:1: assignmentTail returns [Assign assign] : ^( Assign left= identAccess right= assignmentRHS ) ;
    public final Assign assignmentTail() throws RecognitionException {
        Assign assign = null;


        Expr left =null;

        Expr right =null;


        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:208:2: ( ^( Assign left= identAccess right= assignmentRHS ) )
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:208:4: ^( Assign left= identAccess right= assignmentRHS )
            {
            match(input,Assign,FOLLOW_Assign_in_assignmentTail679); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_identAccess_in_assignmentTail683);
            left=identAccess();

            state._fsp--;


            pushFollow(FOLLOW_assignmentRHS_in_assignmentTail687);
            right=assignmentRHS();

            state._fsp--;


            match(input, Token.UP, null); 


             assign = new Assign(left, right); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return assign;
    }
    // $ANTLR end "assignmentTail"



    // $ANTLR start "actualParamList"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:212:1: actualParamList returns [List<Expr> paramList] : (e= expr )+ ;
    public final List<Expr> actualParamList() throws RecognitionException {
        List<Expr> paramList = null;


        Expr e =null;



        	paramList = new ArrayList<Expr>();

        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:216:2: ( (e= expr )+ )
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:216:4: (e= expr )+
            {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:216:4: (e= expr )+
            int cnt15=0;
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( ((LA15_0 >= BinaryOp && LA15_0 <= BooleanConst)||LA15_0==Cast||LA15_0==DecimalIntConst||(LA15_0 >= Field && LA15_0 <= FloatConst)||LA15_0==HexIntConst||LA15_0==Index||LA15_0==MethodCall||LA15_0==NullConst||LA15_0==ThisRef||(LA15_0 >= UnaryOp && LA15_0 <= Var)) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:216:6: e= expr
            	    {
            	    pushFollow(FOLLOW_expr_in_actualParamList717);
            	    e=expr();

            	    state._fsp--;


            	     paramList.add(e); 

            	    }
            	    break;

            	default :
            	    if ( cnt15 >= 1 ) break loop15;
                        EarlyExitException eee =
                            new EarlyExitException(15, input);
                        throw eee;
                }
                cnt15++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return paramList;
    }
    // $ANTLR end "actualParamList"



    // $ANTLR start "ifStmtTail"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:219:1: ifStmtTail returns [Ast elseBlock] : ( Nop |block= stmtBlock );
    public final Ast ifStmtTail() throws RecognitionException {
        Ast elseBlock = null;


        Seq block =null;


        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:220:2: ( Nop |block= stmtBlock )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==Nop) ) {
                alt16=1;
            }
            else if ( (LA16_0==Seq) ) {
                alt16=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }
            switch (alt16) {
                case 1 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:220:4: Nop
                    {
                    match(input,Nop,FOLLOW_Nop_in_ifStmtTail737); 

                     elseBlock = new Nop(); 

                    }
                    break;
                case 2 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:222:4: block= stmtBlock
                    {
                    pushFollow(FOLLOW_stmtBlock_in_ifStmtTail748);
                    block=stmtBlock();

                    state._fsp--;


                     elseBlock = block; 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return elseBlock;
    }
    // $ANTLR end "ifStmtTail"



    // $ANTLR start "stmtBlock"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:226:1: stmtBlock returns [Seq stmtSeq] : ( Seq | ^( Seq sl= stmtList ) );
    public final Seq stmtBlock() throws RecognitionException {
        Seq stmtSeq = null;


        List<Stmt> sl =null;


        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:227:2: ( Seq | ^( Seq sl= stmtList ) )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==Seq) ) {
                int LA17_1 = input.LA(2);

                if ( (LA17_1==DOWN) ) {
                    alt17=2;
                }
                else if ( (LA17_1==UP||LA17_1==Nop||LA17_1==Seq) ) {
                    alt17=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 1, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }
            switch (alt17) {
                case 1 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:227:4: Seq
                    {
                    match(input,Seq,FOLLOW_Seq_in_stmtBlock767); 

                     stmtSeq = seq(); 

                    }
                    break;
                case 2 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:229:4: ^( Seq sl= stmtList )
                    {
                    match(input,Seq,FOLLOW_Seq_in_stmtBlock778); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_stmtList_in_stmtBlock782);
                    sl=stmtList();

                    state._fsp--;


                    match(input, Token.UP, null); 


                     stmtSeq = seq(sl); 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return stmtSeq;
    }
    // $ANTLR end "stmtBlock"



    // $ANTLR start "newExpr"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:236:1: newExpr returns [Expr expr] : ( ^( NewObject id= Identifier ) | ^( NewArray id= Identifier e= expr ) );
    public final Expr newExpr() throws RecognitionException {
        Expr expr = null;


        CommonTree id=null;
        Expr e =null;


        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:237:2: ( ^( NewObject id= Identifier ) | ^( NewArray id= Identifier e= expr ) )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==NewObject) ) {
                alt18=1;
            }
            else if ( (LA18_0==NewArray) ) {
                alt18=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;

            }
            switch (alt18) {
                case 1 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:237:4: ^( NewObject id= Identifier )
                    {
                    match(input,NewObject,FOLLOW_NewObject_in_newExpr809); 

                    match(input, Token.DOWN, null); 
                    id=(CommonTree)match(input,Identifier,FOLLOW_Identifier_in_newExpr813); 

                    match(input, Token.UP, null); 


                     expr = new NewObject((id!=null?id.getText():null)); 

                    }
                    break;
                case 2 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:239:4: ^( NewArray id= Identifier e= expr )
                    {
                    match(input,NewArray,FOLLOW_NewArray_in_newExpr826); 

                    match(input, Token.DOWN, null); 
                    id=(CommonTree)match(input,Identifier,FOLLOW_Identifier_in_newExpr830); 

                    pushFollow(FOLLOW_expr_in_newExpr834);
                    e=expr();

                    state._fsp--;


                    match(input, Token.UP, null); 


                     expr = new NewArray((id!=null?id.getText():null), e); 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "newExpr"



    // $ANTLR start "readExpr"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:243:1: readExpr returns [BuiltInRead readExpr] : BuiltInRead ;
    public final BuiltInRead readExpr() throws RecognitionException {
        BuiltInRead readExpr = null;


        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:244:2: ( BuiltInRead )
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:244:4: BuiltInRead
            {
            match(input,BuiltInRead,FOLLOW_BuiltInRead_in_readExpr855); 

             readExpr = new BuiltInRead(); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return readExpr;
    }
    // $ANTLR end "readExpr"



    // $ANTLR start "readExprFloat"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:248:1: readExprFloat returns [BuiltInReadFloat readExprFloat] : BuiltInReadFloat ;
    public final BuiltInReadFloat readExprFloat() throws RecognitionException {
        BuiltInReadFloat readExprFloat = null;


        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:249:4: ( BuiltInReadFloat )
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:249:6: BuiltInReadFloat
            {
            match(input,BuiltInReadFloat,FOLLOW_BuiltInReadFloat_in_readExprFloat876); 

             readExprFloat = new BuiltInReadFloat(); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return readExprFloat;
    }
    // $ANTLR end "readExprFloat"



    // $ANTLR start "expr"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:253:1: expr returns [Expr expr] : ( ^( BinaryOp left= expr op= binaryOp right= expr ) | ^( UnaryOp U_PLUS e= expr ) | ^( UnaryOp U_MINUS e= expr ) | ^( UnaryOp U_BOOL_NOT e= expr ) |n= DecimalIntConst |n= HexIntConst |n= FloatConst |b= BooleanConst | NullConst | ^( Cast e= expr t= type ) |idA= identAccess );
    public final Expr expr() throws RecognitionException {
        Expr expr = null;


        CommonTree n=null;
        CommonTree b=null;
        Expr left =null;

        BOp op =null;

        Expr right =null;

        Expr e =null;

        String t =null;

        Expr idA =null;


        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:254:2: ( ^( BinaryOp left= expr op= binaryOp right= expr ) | ^( UnaryOp U_PLUS e= expr ) | ^( UnaryOp U_MINUS e= expr ) | ^( UnaryOp U_BOOL_NOT e= expr ) |n= DecimalIntConst |n= HexIntConst |n= FloatConst |b= BooleanConst | NullConst | ^( Cast e= expr t= type ) |idA= identAccess )
            int alt19=11;
            switch ( input.LA(1) ) {
            case BinaryOp:
                {
                alt19=1;
                }
                break;
            case UnaryOp:
                {
                int LA19_2 = input.LA(2);

                if ( (LA19_2==DOWN) ) {
                    switch ( input.LA(3) ) {
                    case U_PLUS:
                        {
                        alt19=2;
                        }
                        break;
                    case U_MINUS:
                        {
                        alt19=3;
                        }
                        break;
                    case U_BOOL_NOT:
                        {
                        alt19=4;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 19, 10, input);

                        throw nvae;

                    }

                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 2, input);

                    throw nvae;

                }
                }
                break;
            case DecimalIntConst:
                {
                alt19=5;
                }
                break;
            case HexIntConst:
                {
                alt19=6;
                }
                break;
            case FloatConst:
                {
                alt19=7;
                }
                break;
            case BooleanConst:
                {
                alt19=8;
                }
                break;
            case NullConst:
                {
                alt19=9;
                }
                break;
            case Cast:
                {
                alt19=10;
                }
                break;
            case Field:
            case Index:
            case MethodCall:
            case ThisRef:
            case Var:
                {
                alt19=11;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;

            }

            switch (alt19) {
                case 1 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:254:4: ^( BinaryOp left= expr op= binaryOp right= expr )
                    {
                    match(input,BinaryOp,FOLLOW_BinaryOp_in_expr903); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expr_in_expr907);
                    left=expr();

                    state._fsp--;


                    pushFollow(FOLLOW_binaryOp_in_expr911);
                    op=binaryOp();

                    state._fsp--;


                    pushFollow(FOLLOW_expr_in_expr915);
                    right=expr();

                    state._fsp--;


                    match(input, Token.UP, null); 


                     expr = new BinaryOp(left, op, right); 

                    }
                    break;
                case 2 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:256:4: ^( UnaryOp U_PLUS e= expr )
                    {
                    match(input,UnaryOp,FOLLOW_UnaryOp_in_expr928); 

                    match(input, Token.DOWN, null); 
                    match(input,U_PLUS,FOLLOW_U_PLUS_in_expr930); 

                    pushFollow(FOLLOW_expr_in_expr934);
                    e=expr();

                    state._fsp--;


                    match(input, Token.UP, null); 


                     expr = new UnaryOp(UOp.U_PLUS, e); 

                    }
                    break;
                case 3 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:258:4: ^( UnaryOp U_MINUS e= expr )
                    {
                    match(input,UnaryOp,FOLLOW_UnaryOp_in_expr947); 

                    match(input, Token.DOWN, null); 
                    match(input,U_MINUS,FOLLOW_U_MINUS_in_expr949); 

                    pushFollow(FOLLOW_expr_in_expr953);
                    e=expr();

                    state._fsp--;


                    match(input, Token.UP, null); 


                     expr = new UnaryOp(UOp.U_MINUS, e); 

                    }
                    break;
                case 4 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:260:4: ^( UnaryOp U_BOOL_NOT e= expr )
                    {
                    match(input,UnaryOp,FOLLOW_UnaryOp_in_expr966); 

                    match(input, Token.DOWN, null); 
                    match(input,U_BOOL_NOT,FOLLOW_U_BOOL_NOT_in_expr968); 

                    pushFollow(FOLLOW_expr_in_expr972);
                    e=expr();

                    state._fsp--;


                    match(input, Token.UP, null); 


                     expr = new UnaryOp(UOp.U_BOOL_NOT, e); 

                    }
                    break;
                case 5 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:262:4: n= DecimalIntConst
                    {
                    n=(CommonTree)match(input,DecimalIntConst,FOLLOW_DecimalIntConst_in_expr985); 

                     expr = new IntConst(intValue((n!=null?n.getText():null), 10, (n!=null?n.getLine():0))); 

                    }
                    break;
                case 6 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:264:4: n= HexIntConst
                    {
                    n=(CommonTree)match(input,HexIntConst,FOLLOW_HexIntConst_in_expr996); 

                     expr = new IntConst(intValue((n!=null?n.getText():null).substring(2), 16, (n!=null?n.getLine():0))); 

                    }
                    break;
                case 7 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:266:4: n= FloatConst
                    {
                    n=(CommonTree)match(input,FloatConst,FOLLOW_FloatConst_in_expr1007); 

                     expr = new FloatConst(floatValue((n!=null?n.getText():null), (n!=null?n.getLine():0))); 

                    }
                    break;
                case 8 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:268:4: b= BooleanConst
                    {
                    b=(CommonTree)match(input,BooleanConst,FOLLOW_BooleanConst_in_expr1022); 

                     expr = new BooleanConst(Boolean.valueOf((b!=null?b.getText():null))); 

                    }
                    break;
                case 9 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:270:4: NullConst
                    {
                    match(input,NullConst,FOLLOW_NullConst_in_expr1031); 

                     expr = new NullConst(); 

                    }
                    break;
                case 10 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:272:4: ^( Cast e= expr t= type )
                    {
                    match(input,Cast,FOLLOW_Cast_in_expr1042); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expr_in_expr1046);
                    e=expr();

                    state._fsp--;


                    pushFollow(FOLLOW_type_in_expr1050);
                    t=type();

                    state._fsp--;


                    match(input, Token.UP, null); 


                     expr = new Cast(e, t); 

                    }
                    break;
                case 11 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:274:4: idA= identAccess
                    {
                    pushFollow(FOLLOW_identAccess_in_expr1063);
                    idA=identAccess();

                    state._fsp--;


                     expr = idA; 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "expr"



    // $ANTLR start "binaryOp"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:278:1: binaryOp returns [BOp op] : ( B_EQUAL | B_NOT_EQUAL | B_LESS_THAN | B_LESS_OR_EQUAL | B_GREATER_THAN | B_GREATER_OR_EQUAL | B_PLUS | B_MINUS | B_OR | B_TIMES | B_DIV | B_MOD | B_AND );
    public final BOp binaryOp() throws RecognitionException {
        BOp op = null;


        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:279:2: ( B_EQUAL | B_NOT_EQUAL | B_LESS_THAN | B_LESS_OR_EQUAL | B_GREATER_THAN | B_GREATER_OR_EQUAL | B_PLUS | B_MINUS | B_OR | B_TIMES | B_DIV | B_MOD | B_AND )
            int alt20=13;
            switch ( input.LA(1) ) {
            case B_EQUAL:
                {
                alt20=1;
                }
                break;
            case B_NOT_EQUAL:
                {
                alt20=2;
                }
                break;
            case B_LESS_THAN:
                {
                alt20=3;
                }
                break;
            case B_LESS_OR_EQUAL:
                {
                alt20=4;
                }
                break;
            case B_GREATER_THAN:
                {
                alt20=5;
                }
                break;
            case B_GREATER_OR_EQUAL:
                {
                alt20=6;
                }
                break;
            case B_PLUS:
                {
                alt20=7;
                }
                break;
            case B_MINUS:
                {
                alt20=8;
                }
                break;
            case B_OR:
                {
                alt20=9;
                }
                break;
            case B_TIMES:
                {
                alt20=10;
                }
                break;
            case B_DIV:
                {
                alt20=11;
                }
                break;
            case B_MOD:
                {
                alt20=12;
                }
                break;
            case B_AND:
                {
                alt20=13;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;

            }

            switch (alt20) {
                case 1 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:279:4: B_EQUAL
                    {
                    match(input,B_EQUAL,FOLLOW_B_EQUAL_in_binaryOp1082); 

                     op = BOp.B_EQUAL; 

                    }
                    break;
                case 2 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:281:4: B_NOT_EQUAL
                    {
                    match(input,B_NOT_EQUAL,FOLLOW_B_NOT_EQUAL_in_binaryOp1091); 

                     op = BOp.B_NOT_EQUAL; 

                    }
                    break;
                case 3 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:283:4: B_LESS_THAN
                    {
                    match(input,B_LESS_THAN,FOLLOW_B_LESS_THAN_in_binaryOp1100); 

                     op = BOp.B_LESS_THAN; 

                    }
                    break;
                case 4 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:285:4: B_LESS_OR_EQUAL
                    {
                    match(input,B_LESS_OR_EQUAL,FOLLOW_B_LESS_OR_EQUAL_in_binaryOp1109); 

                     op = BOp.B_LESS_OR_EQUAL; 

                    }
                    break;
                case 5 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:287:4: B_GREATER_THAN
                    {
                    match(input,B_GREATER_THAN,FOLLOW_B_GREATER_THAN_in_binaryOp1118); 

                     op = BOp.B_GREATER_THAN; 

                    }
                    break;
                case 6 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:289:4: B_GREATER_OR_EQUAL
                    {
                    match(input,B_GREATER_OR_EQUAL,FOLLOW_B_GREATER_OR_EQUAL_in_binaryOp1127); 

                     op = BOp.B_GREATER_OR_EQUAL; 

                    }
                    break;
                case 7 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:291:4: B_PLUS
                    {
                    match(input,B_PLUS,FOLLOW_B_PLUS_in_binaryOp1136); 

                     op = BOp.B_PLUS; 

                    }
                    break;
                case 8 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:293:4: B_MINUS
                    {
                    match(input,B_MINUS,FOLLOW_B_MINUS_in_binaryOp1145); 

                     op = BOp.B_MINUS; 

                    }
                    break;
                case 9 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:295:4: B_OR
                    {
                    match(input,B_OR,FOLLOW_B_OR_in_binaryOp1154); 

                     op = BOp.B_OR; 

                    }
                    break;
                case 10 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:297:4: B_TIMES
                    {
                    match(input,B_TIMES,FOLLOW_B_TIMES_in_binaryOp1163); 

                     op = BOp.B_TIMES; 

                    }
                    break;
                case 11 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:299:4: B_DIV
                    {
                    match(input,B_DIV,FOLLOW_B_DIV_in_binaryOp1172); 

                     op = BOp.B_DIV; 

                    }
                    break;
                case 12 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:301:4: B_MOD
                    {
                    match(input,B_MOD,FOLLOW_B_MOD_in_binaryOp1181); 

                     op = BOp.B_MOD; 

                    }
                    break;
                case 13 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:303:4: B_AND
                    {
                    match(input,B_AND,FOLLOW_B_AND_in_binaryOp1190); 

                     op = BOp.B_AND; 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return op;
    }
    // $ANTLR end "binaryOp"



    // $ANTLR start "identAccess"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:307:1: identAccess returns [Expr expr] : ( ^( Var id= Identifier ) | ThisRef | ^( Field t= identAccess n= Identifier ) | ^( Index t= identAccess e= expr ) | ^( MethodCall (i= identAccess )? name= Identifier (aP= actualParamList )? ) );
    public final Expr identAccess() throws RecognitionException {
        Expr expr = null;


        CommonTree id=null;
        CommonTree n=null;
        CommonTree name=null;
        Expr t =null;

        Expr e =null;

        Expr i =null;

        List<Expr> aP =null;


        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:308:2: ( ^( Var id= Identifier ) | ThisRef | ^( Field t= identAccess n= Identifier ) | ^( Index t= identAccess e= expr ) | ^( MethodCall (i= identAccess )? name= Identifier (aP= actualParamList )? ) )
            int alt23=5;
            switch ( input.LA(1) ) {
            case Var:
                {
                alt23=1;
                }
                break;
            case ThisRef:
                {
                alt23=2;
                }
                break;
            case Field:
                {
                alt23=3;
                }
                break;
            case Index:
                {
                alt23=4;
                }
                break;
            case MethodCall:
                {
                alt23=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;

            }

            switch (alt23) {
                case 1 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:308:4: ^( Var id= Identifier )
                    {
                    match(input,Var,FOLLOW_Var_in_identAccess1211); 

                    match(input, Token.DOWN, null); 
                    id=(CommonTree)match(input,Identifier,FOLLOW_Identifier_in_identAccess1215); 

                    match(input, Token.UP, null); 


                     expr = new Var((id!=null?id.getText():null)); 

                    }
                    break;
                case 2 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:310:4: ThisRef
                    {
                    match(input,ThisRef,FOLLOW_ThisRef_in_identAccess1226); 

                     expr = new ThisRef(); 

                    }
                    break;
                case 3 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:312:4: ^( Field t= identAccess n= Identifier )
                    {
                    match(input,Field,FOLLOW_Field_in_identAccess1237); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_identAccess_in_identAccess1241);
                    t=identAccess();

                    state._fsp--;


                    n=(CommonTree)match(input,Identifier,FOLLOW_Identifier_in_identAccess1245); 

                    match(input, Token.UP, null); 


                     expr = new Field(t, (n!=null?n.getText():null)); 

                    }
                    break;
                case 4 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:314:4: ^( Index t= identAccess e= expr )
                    {
                    match(input,Index,FOLLOW_Index_in_identAccess1258); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_identAccess_in_identAccess1262);
                    t=identAccess();

                    state._fsp--;


                    pushFollow(FOLLOW_expr_in_identAccess1266);
                    e=expr();

                    state._fsp--;


                    match(input, Token.UP, null); 


                     expr = new Index(t, e); 

                    }
                    break;
                case 5 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:316:6: ^( MethodCall (i= identAccess )? name= Identifier (aP= actualParamList )? )
                    {
                    match(input,MethodCall,FOLLOW_MethodCall_in_identAccess1281); 

                    match(input, Token.DOWN, null); 
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:316:21: (i= identAccess )?
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==Field||LA21_0==Index||LA21_0==MethodCall||LA21_0==ThisRef||LA21_0==Var) ) {
                        alt21=1;
                    }
                    switch (alt21) {
                        case 1 :
                            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:316:21: i= identAccess
                            {
                            pushFollow(FOLLOW_identAccess_in_identAccess1285);
                            i=identAccess();

                            state._fsp--;


                            }
                            break;

                    }


                    name=(CommonTree)match(input,Identifier,FOLLOW_Identifier_in_identAccess1290); 

                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:316:53: (aP= actualParamList )?
                    int alt22=2;
                    int LA22_0 = input.LA(1);

                    if ( ((LA22_0 >= BinaryOp && LA22_0 <= BooleanConst)||LA22_0==Cast||LA22_0==DecimalIntConst||(LA22_0 >= Field && LA22_0 <= FloatConst)||LA22_0==HexIntConst||LA22_0==Index||LA22_0==MethodCall||LA22_0==NullConst||LA22_0==ThisRef||(LA22_0 >= UnaryOp && LA22_0 <= Var)) ) {
                        alt22=1;
                    }
                    switch (alt22) {
                        case 1 :
                            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:316:53: aP= actualParamList
                            {
                            pushFollow(FOLLOW_actualParamList_in_identAccess1294);
                            aP=actualParamList();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                     expr = new MethodCallExpr(i, (name!=null?name.getText():null), (aP != null ? aP : new ArrayList<Expr>())); 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "identAccess"



    // $ANTLR start "type"
    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:322:1: type returns [String typeName] : (id= Identifier | ^( ArrayType id= Identifier ) );
    public final String type() throws RecognitionException {
        String typeName = null;


        CommonTree id=null;

        try {
            // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:323:2: (id= Identifier | ^( ArrayType id= Identifier ) )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==Identifier) ) {
                alt24=1;
            }
            else if ( (LA24_0==ArrayType) ) {
                alt24=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;

            }
            switch (alt24) {
                case 1 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:323:4: id= Identifier
                    {
                    id=(CommonTree)match(input,Identifier,FOLLOW_Identifier_in_type1330); 

                     typeName = (id!=null?id.getText():null); 

                    }
                    break;
                case 2 :
                    // D:\\Data\\Dokumente\\Doktorat\\Teaching\\14fs-advanced-compiler-design\\master-repo\\framework\\javali\\Javali\\src\\cd\\parser\\JavaliWalker.g:325:4: ^( ArrayType id= Identifier )
                    {
                    match(input,ArrayType,FOLLOW_ArrayType_in_type1341); 

                    match(input, Token.DOWN, null); 
                    id=(CommonTree)match(input,Identifier,FOLLOW_Identifier_in_type1345); 

                    match(input, Token.UP, null); 


                     typeName = (id!=null?id.getText():null) + "[]"; 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return typeName;
    }
    // $ANTLR end "type"

    // Delegated rules


 

    public static final BitSet FOLLOW_classDecl_in_unit75 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_ClassDecl_in_classDecl102 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_Identifier_in_classDecl106 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_Identifier_in_classDecl110 = new BitSet(new long[]{0x6001000000000008L});
    public static final BitSet FOLLOW_declList_in_classDecl114 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_varDecl_in_declList138 = new BitSet(new long[]{0x6001000000000002L});
    public static final BitSet FOLLOW_methodDecl_in_declList145 = new BitSet(new long[]{0x6001000000000002L});
    public static final BitSet FOLLOW_VarDecl_in_varDecl164 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_varDecl168 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_Identifier_in_varDecl172 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VarDeclList_in_varDecl185 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_varDecl189 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_Identifier_in_varDecl195 = new BitSet(new long[]{0x0000010000000008L});
    public static final BitSet FOLLOW_MethodDecl_in_methodDecl221 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_methodHeading_in_methodDecl225 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_methodBody_in_methodDecl229 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_type_in_methodHeading260 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_Identifier_in_methodHeading264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_methodHeading275 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_Identifier_in_methodHeading279 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_formalParamList_in_methodHeading283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VarDecl_in_formalParamList302 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_formalParamList306 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_Identifier_in_formalParamList310 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MethodBody_in_methodBody338 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_methodBodyWithDeclList_in_methodBody342 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_Seq_in_methodBody348 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_stmtList_in_methodBody353 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_Seq_in_methodBodyWithDeclList383 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_declList_in_methodBodyWithDeclList385 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_stmt_in_stmtList415 = new BitSet(new long[]{0x10A0860207000022L,0x0000000000000001L});
    public static final BitSet FOLLOW_assignmentOrMethodCall_in_stmt437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BuiltInWrite_in_stmt448 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_stmt452 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BuiltInWriteFloat_in_stmt467 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_stmt471 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BuiltInWriteln_in_stmt487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IfElse_in_stmt498 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_stmt502 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmt506 = new BitSet(new long[]{0x0048000000000000L});
    public static final BitSet FOLLOW_ifStmtTail_in_stmt510 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_WhileLoop_in_stmt523 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_stmt527 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmt531 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ReturnStmt_in_stmt546 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_stmt550 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_assignmentTail_in_assignmentOrMethodCall579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identAccess_in_assignmentOrMethodCall590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_assignmentRHS619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_newExpr_in_assignmentRHS630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_readExpr_in_assignmentRHS641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_readExprFloat_in_assignmentRHS652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Assign_in_assignmentTail679 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_identAccess_in_assignmentTail683 = new BitSet(new long[]{0x1896842650D80000L});
    public static final BitSet FOLLOW_assignmentRHS_in_assignmentTail687 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expr_in_actualParamList717 = new BitSet(new long[]{0x1890842650180002L});
    public static final BitSet FOLLOW_Nop_in_ifStmtTail737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBlock_in_ifStmtTail748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Seq_in_stmtBlock767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Seq_in_stmtBlock778 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_stmtList_in_stmtBlock782 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NewObject_in_newExpr809 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_Identifier_in_newExpr813 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NewArray_in_newExpr826 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_Identifier_in_newExpr830 = new BitSet(new long[]{0x1890842650180000L});
    public static final BitSet FOLLOW_expr_in_newExpr834 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BuiltInRead_in_readExpr855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BuiltInReadFloat_in_readExprFloat876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BinaryOp_in_expr903 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr907 = new BitSet(new long[]{0x000000000007FFC0L});
    public static final BitSet FOLLOW_binaryOp_in_expr911 = new BitSet(new long[]{0x1890842650180000L});
    public static final BitSet FOLLOW_expr_in_expr915 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_UnaryOp_in_expr928 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_U_PLUS_in_expr930 = new BitSet(new long[]{0x1890842650180000L});
    public static final BitSet FOLLOW_expr_in_expr934 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_UnaryOp_in_expr947 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_U_MINUS_in_expr949 = new BitSet(new long[]{0x1890842650180000L});
    public static final BitSet FOLLOW_expr_in_expr953 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_UnaryOp_in_expr966 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_U_BOOL_NOT_in_expr968 = new BitSet(new long[]{0x1890842650180000L});
    public static final BitSet FOLLOW_expr_in_expr972 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DecimalIntConst_in_expr985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HexIntConst_in_expr996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FloatConst_in_expr1007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BooleanConst_in_expr1022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NullConst_in_expr1031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Cast_in_expr1042 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1046 = new BitSet(new long[]{0x0000010000000010L});
    public static final BitSet FOLLOW_type_in_expr1050 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_identAccess_in_expr1063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_B_EQUAL_in_binaryOp1082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_B_NOT_EQUAL_in_binaryOp1091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_B_LESS_THAN_in_binaryOp1100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_B_LESS_OR_EQUAL_in_binaryOp1109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_B_GREATER_THAN_in_binaryOp1118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_B_GREATER_OR_EQUAL_in_binaryOp1127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_B_PLUS_in_binaryOp1136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_B_MINUS_in_binaryOp1145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_B_OR_in_binaryOp1154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_B_TIMES_in_binaryOp1163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_B_DIV_in_binaryOp1172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_B_MOD_in_binaryOp1181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_B_AND_in_binaryOp1190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Var_in_identAccess1211 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_Identifier_in_identAccess1215 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ThisRef_in_identAccess1226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Field_in_identAccess1237 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_identAccess_in_identAccess1241 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_Identifier_in_identAccess1245 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_Index_in_identAccess1258 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_identAccess_in_identAccess1262 = new BitSet(new long[]{0x1890842650180000L});
    public static final BitSet FOLLOW_expr_in_identAccess1266 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MethodCall_in_identAccess1281 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_identAccess_in_identAccess1285 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_Identifier_in_identAccess1290 = new BitSet(new long[]{0x1890842650180008L});
    public static final BitSet FOLLOW_actualParamList_in_identAccess1294 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_Identifier_in_type1330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ArrayType_in_type1341 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_Identifier_in_type1345 = new BitSet(new long[]{0x0000000000000008L});

}