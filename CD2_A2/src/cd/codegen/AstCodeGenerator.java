package cd.codegen;

import static cd.Config.MAIN;
import static cd.Config.SCANF;
import static cd.Config.SIZEOF_PTR;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import cd.Config;
import cd.Main;
import cd.debug.AstOneLine;
import cd.exceptions.AssemblyFailedException;
import cd.ir.Ast;
import cd.ir.Ast.Assign;
import cd.ir.Ast.BinaryOp;
import cd.ir.Ast.BinaryOp.BOp;
import cd.ir.Ast.BooleanConst;
import cd.ir.Ast.BuiltInRead;
import cd.ir.Ast.BuiltInReadFloat;
import cd.ir.Ast.BuiltInWrite;
import cd.ir.Ast.BuiltInWriteFloat;
import cd.ir.Ast.BuiltInWriteln;
import cd.ir.Ast.Cast;
import cd.ir.Ast.ClassDecl;
import cd.ir.Ast.Expr;
import cd.ir.Ast.Field;
import cd.ir.Ast.FloatConst;
import cd.ir.Ast.IfElse;
import cd.ir.Ast.Index;
import cd.ir.Ast.IntConst;
import cd.ir.Ast.MethodCall;
import cd.ir.Ast.MethodCallExpr;
import cd.ir.Ast.MethodDecl;
import cd.ir.Ast.NewArray;
import cd.ir.Ast.NewObject;
import cd.ir.Ast.NullConst;
import cd.ir.Ast.ReturnStmt;
import cd.ir.Ast.ThisRef;
import cd.ir.Ast.UnaryOp;
import cd.ir.Ast.Var;
import cd.ir.Ast.WhileLoop;
import cd.ir.AstVisitor;
import cd.ir.ExprVisitor;
import cd.ir.Symbol.ArrayTypeSymbol;
import cd.ir.Symbol.ClassSymbol;
import cd.ir.Symbol.MethodSymbol;
import cd.ir.Symbol.TypeSymbol;
import cd.ir.Symbol.VariableSymbol;
import cd.util.Pair;

public class AstCodeGenerator {

	protected final RegsNeededVisitor rnv = new RegsNeededVisitor();
	protected final ExprGenerator eg = new ExprGenerator();
	protected final StmtDeclGenerator sdg = new StmtDeclGenerator();
	protected final Writer out;
	protected final Main main;

	public AstCodeGenerator(Main main, Writer out) {
		{
			initMethodData();
		}
		this.out = out;
		this.main = main;
	}

	public void debug(String format, Object... args) {
		this.main.debug(format, args);
	}

	/**
	 * The address of the this ptr relative to the BP. Note that the this ptr is
	 * always the first argument. Default offset value is 8 but this can
	 * change depending on the number of parameters pushed on the stack.
	 */
	protected int THIS_OFFSET = 8;

	/**
	 * Name of the internal Javali$CheckCast() helper function we generate.
	 */
	private static final String CHECK_CAST = "Javali$CheckCast";

	/**
	 * Name of the internal Javali$CheckNull() helper function we generate.
	 */
	private static final String CHECK_NULL = "Javali$CheckNull";

	/**
	 * Name of the internal Javali$CheckNonZero() helper function we generate.
	 */
	private static final String CHECK_NON_ZERO = "Javali$CheckNonZero";

	/**
	 * Name of the internal Javali$CheckArraySize() helper function we generate.
	 */
	private static final String CHECK_ARRAY_SIZE = "Javali$CheckArraySize";

	/**
	 * Name of the internal Javali$Alloc() helper function we generate.
	 */
	private static final String ALLOC = "Javali$Alloc";
	
	/**
	 * Name of the internal Javali$PrintNewLine() helper function we generate.
	 */
	private static final String PRINT_NEW_LINE = "Javali$PrintNewLine";
	
	/**
	 * Name of the internal Javali$PrintFloat() helper function we generate.
	 */
	private static final String PRINT_FLOAT = "Javali$PrintFloat";
	
	/**
	 * Name of the internal Javali$PrintInteger() helper function we generate.
	 */
	private static final String PRINT_INTEGER = "Javali$PrintInteger";
	
	/**
	 * Name of the internal Javali$ReadInteger() helper function we generate.
	 */
	private static final String READ_INTEGER = "Javali$ReadInteger";
	
	/**
	 * Name of the internal Javali$ReadFloat() helper function we generate.
	 */
	private static final String READ_FLOAT = "Javali$ReadFloat";
	
	/**
	 * Main method. Causes us to emit x86 assembly corresponding to {@code ast}
	 * into {@code file}. Throws a {@link RuntimeException} should any I/O error
	 * occur.
	 * 
	 * <p>
	 * The generated file will be divided into three sections:
	 * <ol>
	 * <li>Prologue: Generated by {@link #emitPrologue()}. This contains any
	 * introductory declarations and the like.
	 * <li>Body: Generated by {@link ExprGenerator}. This contains the main
	 * method definitions.
	 * <li>Epilogue: Generated by {@link #emitEpilogue()}. This contains any
	 * final declarations required.
	 * </ol>
	 */
	public void go(List<? extends ClassDecl> astRoots) {

		{
			emitPrefix(astRoots);
		}

		for (ClassDecl ast : astRoots) {
			sdg.gen(ast);
		}
	}

	public void emitPrefix(List<? extends ClassDecl> astRoots) {
		// compute method and field offsets
		for (ClassDecl ast : astRoots) {
			computeFieldOffsets(ast.sym);
			computeVtableOffsets(ast.sym);
		}

		// emit vtables
		for (TypeSymbol ts : main.allTypeSymbols)
			emitVtable(ts);

		// Emit some useful string constants and static data:
		emit(Config.DATA_STR_SECTION);
		emitLabel("STR_NL");
		emit(Config.DOT_STRING + " \"\\n\"");
		emitLabel("STR_D");
		emit(Config.DOT_STRING + " \"%d\"");
		emitLabel("STR_F");
		emit(Config.DOT_STRING + " \"%.10f\"");
		emitLabel("SCANF_STR_F");
		emit(Config.DOT_STRING + " \"%f\"");
		emit(Config.DATA_INT_SECTION);

		emit(Config.TEXT_SECTION);

		// Generate a helper method for checking casts:
		// It takes first a vtable and second an object ptr.
		{
			String obj = callerSave[0];
			String cls = callerSave[1];
			String looplbl = uniqueLabel();
			String donelbl = uniqueLabel();
			String faillbl = uniqueLabel();
			emitCommentSection(CHECK_CAST + " function");
			emitLabel(CHECK_CAST);
			emit("enter", "$8", "$0");
			emit("and", c(-16), SP);
			emit("sub", c(16), SP);
			emitLoad(SIZEOF_PTR * 2, BP, cls);
			emitLoad(SIZEOF_PTR * 3, BP, obj);
			emit("cmpl", c(0), obj);
			emit("je", donelbl); // allow null objects to pass
			emitLoad(0, obj, obj); // load vtbl of object
			emitLabel(looplbl);
			emit("cmpl", obj, cls);
			emit("je", donelbl);
			emit("cmpl", c(0), obj);
			emit("je", faillbl);
			emitLoad(0, obj, obj); // load parent vtable
			emit("jmp", looplbl);
			emitLabel(faillbl);
			emitStore(c(1), 0, SP);
			emit("call", Config.EXIT);
			emitLabel(donelbl);
			emit("leave");
			emit("ret");
		}

		// Generate a helper method for checking for null ptrs:
		{
			String oknulllbl = uniqueLabel();
			emitCommentSection(CHECK_NULL + " function");
			emitLabel(CHECK_NULL);
			emit("enter", "$8", "$0");
			emit("and", c(-16), SP);
			emit("sub", c(16), SP);
			emit("cmpl", c(0), o(SIZEOF_PTR * 2, BP));
			emit("jne", oknulllbl);
			emitStore(c(4), 0, SP);
			emit("call", Config.EXIT);
			emitLabel(oknulllbl);
			emit("leave");
			emit("ret");
		}

		// Generate a helper method for checking that we don't divide by zero:
		{
			String oknzlbl = uniqueLabel();
			emitCommentSection(CHECK_NON_ZERO + " function");
			emitLabel(CHECK_NON_ZERO);
			emit("enter", "$8", "$0");
			emit("and", c(-16), SP);
			emit("sub", c(16), SP);
			emit("cmpl", c(0), o(SIZEOF_PTR * 2, BP));
			emit("jne", oknzlbl);
			emitStore(c(8), 0, SP);
			emit("call", Config.EXIT);
			emitLabel(oknzlbl);
			emit("leave");
			emit("ret");
		}

		// Generate a helper method for checking array size:
		{
			String okunqlbl = uniqueLabel();
			emitCommentSection(CHECK_ARRAY_SIZE + " function");
			emitLabel(CHECK_ARRAY_SIZE);
			emit("enter", "$8", "$0");
			emit("and", c(-16), SP);
			emit("sub", c(16), SP);
			emit("cmpl", c(0), o(SIZEOF_PTR * 2, BP));
			emit("jge", okunqlbl);
			emitStore(c(5), 0, SP);
			emit("call", Config.EXIT);
			emitLabel(okunqlbl);
			emit("leave");
			emit("ret");
		}
		
		// Generate a helper method for allocating objects/arrays
		{
			String size = callerSave[0];
			emitCommentSection(ALLOC + " function");
			emitLabel(ALLOC);
			emit("enter", "$8", "$0");
			emit("and", c(-16), SP);
			emit("sub", c(16), SP);
			emitLoad(8, BP, size);
			emitStore(size, 0, SP);
			emit("call", Config.MALLOC);
			emit("leave");
			emit("ret");
		}
		
		// Generate a helper method for printing a new line
		{
			emitCommentSection(PRINT_NEW_LINE + " function");
			emitLabel(PRINT_NEW_LINE);
			emit("enter", "$8", "$0");
			emit("and", c(-16), SP);
			emit("sub", c(16), SP);
			emitStore("$STR_NL", 0, SP);
			emit("call", Config.PRINTF);
			emit("leave");
			emit("ret");
		}
		
		// Generate a helper method for printing a float
		{
			emitCommentSection(PRINT_FLOAT + " function");
			emitLabel(PRINT_FLOAT);
			emit("enter", "$8", "$0");
			emit("and", c(-16), SP);
			emit("sub", c(16), SP);
			emitMoveFloat(o(8, BP), FLOAT_REG_0);
			emit("cvtps2pd", FLOAT_REG_0, FLOAT_REG_0);
			emitStoreDouble(FLOAT_REG_0, 4, SP);
			emitStore("$STR_F", 0, SP);
			emit("call", Config.PRINTF);
			emit("leave");
			emit("ret");
		}
		
		// Generate a helper method for printing an integer
		{
			String temp = callerSave[0];
			emitCommentSection(PRINT_INTEGER + " function");
			emitLabel(PRINT_INTEGER);
			emit("enter", "$8", "$0");
			emit("and", c(-16), SP);
			emit("sub", c(16), SP);
			emitLoad(8, BP, temp);
			emitStore(temp, 4, SP);
			emitStore("$STR_D", 0, SP);
			emit("call", Config.PRINTF);
			emit("leave");
			emit("ret");
		}
		
		// Generate a helper method for reading an integer
		{
			String number = callerSave[0];
			emitCommentSection(READ_INTEGER + " function");
			emitLabel(READ_INTEGER);
			emit("enter", "$8", "$0");
			emit("and", c(-16), SP);
			emit("sub", c(16), SP);
			emit("leal", o(8, SP), number);
			emitStore(number, 4, SP);
			emitStore("$STR_D", 0, SP);
			emit("call", SCANF);
			emitLoad(8, SP, "%eax");
			emit("leave");
			emit("ret");
		}
		
		// Generate a helper method for reading a float
		{
			String floatNumber = callerSave[0];
			emitCommentSection(READ_FLOAT + " function");
			emitLabel(READ_FLOAT);
			emit("enter", "$8", "$0");
			emit("and", c(-16), SP);
			emit("sub", c(16), SP);
			emit("leal", o(8, SP), floatNumber);
			emitStore(floatNumber, 4, SP);
			emitStore("$SCANF_STR_F", 0, SP);
			emit("call", SCANF);
			emitLoad(8, SP, "%eax");
			emit("leave");
			emit("ret");
		}

		// Generate AST for main() method:
		// new Main().main()
		Ast.NewObject newMain = new Ast.NewObject("Main");
		newMain.type = main.mainType;
		Ast.MethodCall callMain = new Ast.MethodCall(newMain, "main", Collections.<Expr> emptyList());
		callMain.sym = main.mainType.getMethod("main");

		// Emit the main() method:
		// new Main().main();
		emitCommentSection("main() function");
		emit(".globl " + MAIN);
		emitLabel(MAIN);
		emit("enter", "$8", "$0");
		emit("and", -16, SP);
		sdg.gen(callMain);
		emit("movl", "$0", "%eax"); // normal termination:
		emit("leave");
		emit("ret");
			
	}

	/**
	 * Computes the vtable offset for each method defined in the class
	 * {@code sym}.
	 */
	private int computeVtableOffsets(ClassSymbol sym) {

		if (sym == null)
			return 0;

		if (sym.totalMethods != -1)
			return sym.totalMethods;

		int index = computeVtableOffsets(sym.superClass);
		for (MethodSymbol ms : sym.methods.values()) {
			assert ms.vtableIndex == -1;
			if (ms.overrides != null)
				ms.vtableIndex = ms.overrides.vtableIndex;
			else
				ms.vtableIndex = index++;
		}
		sym.totalMethods = index;
		return index;
	}

	/**
	 * Computes the offset for each field.
	 */
	private int computeFieldOffsets(ClassSymbol sym) {
		if (sym == null)
			return 0;

		if (sym.totalFields != -1)
			return sym.totalFields;

		int index = computeFieldOffsets(sym.superClass);
		for (VariableSymbol fs : sym.fields.values()) {
			assert fs.offset == -1;
			// compute offset in bytes; note that 0 is the vtable
			fs.offset = (index * SIZEOF_PTR) + SIZEOF_PTR;
			index++;
		}
		sym.totalFields = index;
		sym.sizeof = (sym.totalFields + 1) * Config.SIZEOF_PTR;
		return index;
	}

	private void collectVtable(MethodSymbol[] vtable, ClassSymbol sym) {
		if (sym.superClass != null)
			collectVtable(vtable, sym.superClass);
		for (MethodSymbol ms : sym.methods.values())
			vtable[ms.vtableIndex] = ms;
	}

	private void emitVtable(TypeSymbol ts) {
		if (ts instanceof ClassSymbol) {
			ClassSymbol cs = (ClassSymbol) ts;

			// Collect the vtable:
			MethodSymbol[] vtable = new MethodSymbol[cs.totalMethods];
			collectVtable(vtable, cs);

			// Emit vtable for this class:
			emitLabel(vtable(cs));
			if (cs.superClass != null)
				emitConstantData(vtable(cs.superClass));
			else
				emitConstantData("0");
			for (int i = 0; i < cs.totalMethods; i++)
				emitConstantData(mthdlbl(vtable[i]));
		} else if (ts instanceof ArrayTypeSymbol) {
			ArrayTypeSymbol as = (ArrayTypeSymbol) ts;
			emitLabel(vtable(as));
			emitConstantData(vtable(main.objectType));
		}
	}

	private String vtable(TypeSymbol ts) {
		if (ts instanceof ClassSymbol) {
			return "vtable_" + ((ClassSymbol) ts).name;
		} else if (ts instanceof ArrayTypeSymbol) {
			return "vtablearr_" + ((ArrayTypeSymbol) ts).elementType.name;
		} else {
			throw new RuntimeException("No vtable for " + ts.name);
		}
	}

	// Simplistic Register management:
	List<String> registers = new ArrayList<String>();

	final String calleeSave[] = new String[] { "%esi", "%edi", "%ebx" };

	final String callerSave[] = new String[] { "%eax", "%ecx", "%edx" };

	private static final String FLOAT_REG_1 = "%xmm1";

	private static final String FLOAT_REG_0 = "%xmm0";

	final String BP = "%ebp", SP = "%esp";

	final int SIZEOF_REG = 4;

	protected void initRegisters() {
		registers.clear();
		registers.add("%eax");
		registers.add("%ebx");
		registers.add("%ecx");
		registers.add("%edx");
		registers.add("%esi");
		registers.add("%edi");
	}

	protected String getRegister() {
		int last = registers.size() - 1;
		if (last < 0)
			throw new AssemblyFailedException("Program requires too many registers");
		
		return registers.remove(last);
	}

	protected void releaseRegister(String reg) {
		assert !registers.contains(reg);
		registers.add(reg);
	}

	protected boolean isInUse(String reg) {
		return !registers.contains(reg);
	}

	protected int availableRegisters() {
		return registers.size();
	}

	/** Returns true for %e[abcd]x */
	protected boolean hasLowByteVersion(String reg) {
		return reg.startsWith("%e") && reg.endsWith("x");
	}

	/**
	 * Used to store the temporaries. We grow our stack dynamically, 
	 * we allocate "temporary" values on this stack during method execution. 
	 * Values can be stored and retrieved using
	 * {@link #push(String)} and {@link #pop(String)}, which use the program
	 * stack.
	 */
	
	protected int bytes = 0;
	
	protected void initMethodData() {
		{
			THIS_OFFSET = 8;
			bytes = 0;
			initRegisters();
		}
	}
	
	protected int padding(int numberOfParameters) {
		int padding = (bytes + numberOfParameters * Config.SIZEOF_PTR + 15) & 0xFFFFFFF0;
		return padding - bytes - numberOfParameters * Config.SIZEOF_PTR;	
	}
	
	protected void push(int padding) {
		if (padding > 0) {
			emit("sub", padding, SP);
			bytes += padding;
		}
	}
	
	protected void pop(int padding) {
		if (padding > 0) {
			emit("add", padding, SP);
			bytes -= padding;
		}
		assert bytes >= 0;
	}

	protected void push(String reg) {
		emit("push " + reg);
		bytes += Config.SIZEOF_PTR;
	}

	protected void pop(String reg) {
		emit("pop " + reg);
		bytes -= Config.SIZEOF_PTR;
		assert bytes >= 0;
	}

	protected void restoreCalleeSaveRegs() {
		for (int reg = calleeSave.length - 1; reg >= 0; reg--) {
			emit("pop " + calleeSave[reg]);
		}
	}

	protected void storeCalleeSaveRegs() {
		bytes = 0;
		for (int reg = 0; reg < calleeSave.length; reg++) {
			emit("push " + calleeSave[reg]);
			bytes += Config.SIZEOF_PTR;
		}
	}
	
	protected void restoreCallerSaveRegs(String res) {
		for (int reg = callerSave.length - 1; reg >= 0; reg--) {
			if (registers.contains(callerSave[reg]))
				continue; // not in use
			if (callerSave[reg].equals(res))
				continue; // contains our result
			pop(callerSave[reg]);
		}
	}
	
	protected void storeCallerSaveRegs(String res) {
		for (int reg = 0; reg < callerSave.length; reg++) {
			if (registers.contains(callerSave[reg]))
				continue; // not in use
			if (callerSave[reg].equals(res))
				continue; // will contain our result
			push(callerSave[reg]);
		}
	}
	
	protected int emitCallPrefix(String res, int numberOfParameters) {
		storeCallerSaveRegs(res);
		int padding = padding(numberOfParameters);
		push(padding);
		return padding;
	}
	
	protected void emitCallSuffix(String res, int numberOfParameters, int padding) {
		pop(numberOfParameters * Config.SIZEOF_PTR + padding);
		if (res != null) {
			emitMove("%eax", res);
		}
		restoreCallerSaveRegs(res);
	}

	/**
	 * Given a register like {@code %eax} returns {@code %al}, but doesn't work
	 * for {@code %esi} and {@code %edi}!
	 */
	protected String lowByteVersion(String reg) {
		assert hasLowByteVersion(reg);
		return "%" + reg.charAt(2) + "l";
	}

	/**
	 * Generates code which evaluates {@code ast} and branches to {@code lbl} if
	 * the value generated for {@code ast} is false.
	 */
	public void genJumpIfFalse(Expr ast, String lbl) {
		// A better way to implement this would be with a separate
		// visitor.
		String reg = eg.gen(ast);
		emit("cmpl", "$0", reg);
		emit("je", lbl);
		releaseRegister(reg);
	}

	/**
	 * Generates code to evaluate expressions. After emitting the code, returns
	 * a String which indicates the register where the result can be found.
	 */
	protected class ExprGenerator extends ExprVisitor<String, Void> {

		public String gen(Expr ast) {
			return visit(ast, null);
		}

		/**
		 * This routine handles register shortages. It generates a value for
		 * {@code right}, while keeping the value in {@code leftReg} live.
		 * However, if there are insufficient registers, it may temporarily
		 * store the value in {@code leftReg} to the stack. In this case, it
		 * will be restored into another register once {@code right} has been
		 * evaluated, but the register may not be the same as {@code leftReg}.
		 * Therefore, this function returns a pair of registers, the first of
		 * which stores the left value, and the second of which stores the right
		 * value.
		 * 
		 */
		public Pair<String> genPushing(String leftReg, Expr right) {
			
			boolean pop = false;

			if (rnv.calc(right) > availableRegisters()) {
				push(leftReg);
				releaseRegister(leftReg);
				pop = true;
			}
			
			String rightReg = gen(right);
						
			if (pop) {
				leftReg = getRegister();
				pop(leftReg);
			}

			return new Pair<String>(leftReg, rightReg);

		}

		@Override
		public String visit(Expr ast, Void arg) {

			try {
				emitIndent("Emitting " + AstOneLine.toString(ast));
				return super.visit(ast, null);
			} finally {
				emitUndent();
			}

		}

		private abstract class OperandsDispatcher {

			public abstract void integerOp(String leftReg, Ast.BinaryOp.BOp op,
					String rightReg);
			
			public abstract void floatOp(String leftReg, Ast.BinaryOp.BOp op,
					String rightReg);
			
			public abstract void floatCmp(String leftReg, Ast.BinaryOp.BOp op,
					String rightReg);

			public abstract void booleanOp(String leftReg, Ast.BinaryOp.BOp op,
					String rightReg);

			public void binaryOp(Ast.BinaryOp ast, String leftReg, String rightReg) {
				
				assert ast.type != null;
				
				if (ast.type == main.intType) {
					integerOp(leftReg, ast.operator, rightReg);
				} else if (ast.type == main.floatType) {
					floatOp(leftReg, ast.operator, rightReg);
				} else if (ast.type == main.booleanType) {
					
					final TypeSymbol opType = ast.left().type;

					if (opType == main.intType) {
						integerOp(leftReg, ast.operator, rightReg);
					} else if (opType == main.floatType) {
						floatCmp(leftReg, ast.operator, rightReg);
					} else if (opType == main.booleanType) {
						booleanOp(leftReg, ast.operator, rightReg);
					} else {
						integerOp(leftReg, ast.operator, rightReg);
					}
					
				}
				
			}
			
		}

		@Override
		public String binaryOp(BinaryOp ast, Void arg) {
			{
				if(ast.operator == BOp.B_AND || ast.operator == BOp.B_OR) {
					return binaryOpShortCircuit(ast);
				}
				
				String leftReg = null;
				String rightReg = null;
				
				{
				
					leftReg = gen(ast.left());
					Pair<String> regs = genPushing(leftReg, ast.right());
					leftReg = regs.a;
					rightReg = regs.b;
					
				}
				
				assert leftReg != null && rightReg != null;
				
				new OperandsDispatcher() {

					@Override
					public void booleanOp(String leftReg, BOp op, String rightReg) {
						integerOp(leftReg, op, rightReg);
					}
					
					@Override
					public void integerOp(String leftReg, BOp op, String rightReg) {

						switch (op) {
						case B_TIMES:
							emit("imull", rightReg, leftReg);
							break;
						case B_PLUS:
							emit("addl", rightReg, leftReg);
							break;
						case B_MINUS:
							emit("subl", rightReg, leftReg);
							break;
						case B_DIV:
							emitDivMod("%eax", leftReg, rightReg);
							break;
						case B_MOD:
							emitDivMod("%edx", leftReg, rightReg);
							break;
						case B_EQUAL:
							emitCmp("sete", leftReg, rightReg);
							break;
						case B_NOT_EQUAL:
							emitCmp("setne", leftReg, rightReg);
							break;
						case B_LESS_THAN:
							emitCmp("setl", leftReg, rightReg);
							break;
						case B_LESS_OR_EQUAL:
							emitCmp("setle", leftReg, rightReg);
							break;
						case B_GREATER_THAN:
							emitCmp("setg", leftReg, rightReg);
							break;
						case B_GREATER_OR_EQUAL:
							emitCmp("setge", leftReg, rightReg);
							break;
						default:
							throw new AssemblyFailedException(
									"Invalid binary operator for " + 
											main.intType + " or " + main.booleanType);
						}

					}
					
					@Override
					public void floatOp(String leftReg, BOp op, String rightReg) {

						emitGprRegToFloatReg(FLOAT_REG_0, leftReg);
						emitGprRegToFloatReg(FLOAT_REG_1, rightReg);

						switch (op) {
						case B_TIMES:
							emit("mulss", FLOAT_REG_1, FLOAT_REG_0);
							break;
						case B_PLUS:
							emit("addss", FLOAT_REG_1, FLOAT_REG_0);
							break;
						case B_MINUS:
							emit("subss", FLOAT_REG_1, FLOAT_REG_0);
							break;
						case B_DIV:
							emit("divss", FLOAT_REG_1, FLOAT_REG_0);
							break;
						case B_MOD:
							throw new AssemblyFailedException(
									"Invalid binary operator " 
											+ BOp.B_MOD.toString() 
											+ " for type " + main.floatType);
						default:
							throw new AssemblyFailedException(
									"Invalid binary operator for " 
											+ main.floatType);
						}
						emitFloatRegToGprReg(leftReg, FLOAT_REG_0);
					}

					@Override
					public void floatCmp(String leftReg, BOp op, String rightReg) {

						switch (op) {
						case B_EQUAL:
							emitCmpFloat("je", leftReg, rightReg);
							break;
						case B_NOT_EQUAL:
							emitCmpFloat("jne", leftReg, rightReg);
							break;
						case B_LESS_THAN:
							emitCmpFloat("jb", leftReg, rightReg);
							break;
						case B_LESS_OR_EQUAL:
							emitCmpFloat("jbe", leftReg, rightReg);
							break;
						case B_GREATER_THAN:
							emitCmpFloat("ja", leftReg, rightReg);
							break;
						case B_GREATER_OR_EQUAL:
							emitCmpFloat("jae", leftReg, rightReg);
							break;
						default:
							throw new AssemblyFailedException(
									"Invalid binary operator for " 
											+ main.floatType);
						}

					}

				}.binaryOp(ast, leftReg, rightReg);

				releaseRegister(rightReg);

				return leftReg;

			}
		}

		private String binaryOpShortCircuit(BinaryOp ast) {
			assert ast.operator == BOp.B_AND || ast.operator == BOp.B_OR;
			
			String leftReg = null;
			String rightReg = null;
			
			String exitLabel = uniqueLabel();

			// evaluate left
			leftReg = gen(ast.left());
			assert leftReg != null;
			
			// skip evaluation of right
			emit("cmpl", c(0), leftReg);
			if(ast.operator == BOp.B_AND) {
				emit("je", exitLabel);
			} else {
				emit("jne", exitLabel);
			}
			
			// evaluate right
			Pair<String> regs = genPushing(leftReg, ast.right());
			leftReg = regs.a;
			rightReg = regs.b;
			assert rightReg != null;
			
			// calculate actual result
			if(ast.operator == BOp.B_AND) {
				emit("andl", rightReg, leftReg);
			} else {
				emit("orl", rightReg, leftReg);
			}
			
			emitLabel(exitLabel);
			
			return leftReg;
		}

		private void emitCmp(String opname, String leftReg, String rightReg) {

			emit("cmpl", rightReg, leftReg);

			if (hasLowByteVersion(leftReg)) {
				emit("movl", "$0", leftReg);
				emit(opname, lowByteVersion(leftReg));
			} else {
				push("%eax");
				emit("movl", "$0", "%eax");
				emit(opname, "%al");
				emit("movl", "%eax", leftReg);
				pop("%eax");
			}

		}

		private void emitCmpFloat(String opname, String leftReg, String rightReg) {

			String label = uniqueLabel();
			String trueLabel = "float$cmp$" + label + "$true";
			String endLabel = "float$cmp$" + label + "$end";

			emitGprRegToFloatReg(FLOAT_REG_0, leftReg);
			emitGprRegToFloatReg(FLOAT_REG_1, rightReg);

			emit("ucomiss", FLOAT_REG_1, FLOAT_REG_0);
			emit(opname, trueLabel);
			emitMove(c(0), leftReg);
			emit("jmp", endLabel);
			emitLabel(trueLabel);
			emitMove(c(1), leftReg);
			emitLabel(endLabel);

		}

		private void emitDivMod(String whichResultReg, String leftReg, String rightReg) {
			
			// Compare right reg for 0
			int padding = emitCallPrefix(null, 1);
			push(rightReg);
			emit("call", CHECK_NON_ZERO);
			emitCallSuffix(null, 1, padding);

			// Save EAX, EBX, and EDX to the stack if they are not used
			// in this subtree (but are used elsewhere). We will be
			// changing them.
			List<String> dontBother = Arrays.asList(rightReg, leftReg);
			String[] affected = { "%eax", "%ebx", "%edx" };
			for (String s : affected)
				if (!dontBother.contains(s) && isInUse(s))
					emit("pushl", s);

			// Move the LHS (numerator) into eax
			// Move the RHS (denominator) into ebx
			emit("pushl", rightReg);
			emit("pushl", leftReg);
			emit("popl", "%eax");
			emit("popl", "%ebx");
			emit("cltd"); // sign-extend %eax into %edx
			emit("idivl", "%ebx"); // division, result into edx:eax

			// Move the result into the LHS, and pop off anything we saved
			emit("movl", whichResultReg, leftReg);
			for (int i = affected.length - 1; i >= 0; i--) {
				String s = affected[i];
				if (!dontBother.contains(s) && isInUse(s))
					emit("popl", s);
			}
		}

		@Override
		public String booleanConst(BooleanConst ast, Void arg) {
			{
				String reg = getRegister();
				emit("movl", ast.value ? "$1" : "$0", reg);
				return reg;
			}
		}

		@Override
		public String builtInRead(BuiltInRead ast, Void arg) {
			{
				String reg = getRegister();
				int padding = emitCallPrefix(reg, 0);
				emit("call", READ_INTEGER);
				emitCallSuffix(reg, 0, padding);
				return reg;
			}
		}

		@Override
		public String builtInReadFloat(BuiltInReadFloat ast, Void arg) {

			{
				String reg = getRegister();
				int padding = emitCallPrefix(reg, 0);
				emit("call", READ_FLOAT);
				emitCallSuffix(reg, 0, padding);
				return reg;
			}

		}

		@Override
		public String cast(Cast ast, Void arg) {
			{
				// Invoke the helper function. If it does not exit,
				// the cast succeeded!
				String objReg = gen(ast.arg());
				int padding = emitCallPrefix(null, 2);
				push(objReg);
				push(c(vtable(ast.typeSym)));
				emit("call", CHECK_CAST);
				emitCallSuffix(null, 2, padding);
				return objReg;
			}
		}

		@Override
		public String index(Index ast, Void arg) {
			{
				String arr = gen(ast.left());
				int padding = emitCallPrefix(null, 1);
				push(arr);
				emit("call", CHECK_NULL);
				emitCallSuffix(null, 1, padding);
				Pair<String> pair = genPushing(arr, ast.right());
				arr = pair.a;
				String idx = pair.b;
				emitMove(a(arr, idx), idx);
				releaseRegister(arr);
				return idx;
			}
		}

		@Override
		public String intConst(IntConst ast, Void arg) {
			{
				String reg = getRegister();
				emit("movl", "$" + ast.value, reg);
				return reg;
			}
		}

		@Override
		public String floatConst(FloatConst ast, Void arg) {
			{
				String reg = getRegister();
				int floatValue = Float.floatToRawIntBits(ast.value);
				emit("movl", "$" + floatValue, reg);
				return reg;
			}
		}

		@Override
		public String field(Field ast, Void arg) {
			{
				String reg = gen(ast.arg());
				int padding = emitCallPrefix(null, 1);
				push(reg);
				emit("call", CHECK_NULL);
				emitCallSuffix(null, 1, padding);
				assert ast.sym.offset != -1;
				emitLoad(ast.sym.offset, reg, reg);
				return reg;
			}
		}

		@Override
		public String newArray(NewArray ast, Void arg) {
			{
				// Size of the array = 4 + elemsize * num elem.
				// Compute that into reg, store it into the stack as
				// an argument to Javali$Alloc(), and then use it to store final
				// result.
				ArrayTypeSymbol arrsym = (ArrayTypeSymbol) ast.type;
				String reg = gen(ast.arg());

				// Check for negative array sizes
				int padding = emitCallPrefix(null, 1);
				push(reg);
				emit("call", CHECK_ARRAY_SIZE);
				emitCallSuffix(null, 1, padding);

				emit("imul", Config.SIZEOF_PTR, reg);
				emit("addl", Config.SIZEOF_PTR, reg);
				
				int allocPadding = emitCallPrefix(reg, 1);
				push(reg);
				emit("call", ALLOC);
				emitCallSuffix(reg, 1, allocPadding);
				
				emitStore(c(vtable(arrsym)), 0, reg);
				return reg;
			}
		}

		@Override
		public String newObject(NewObject ast, Void arg) {
			{
				ClassSymbol clssym = (ClassSymbol) ast.type;
				String reg = getRegister();
				int allocPadding = emitCallPrefix(reg, 1);
				push(c(clssym.sizeof));
				emit("call", ALLOC);
				emitCallSuffix(reg, 1, allocPadding);
				emitStore(c(vtable(clssym)), 0, reg);
				return reg;
			}
		}

		@Override
		public String nullConst(NullConst ast, Void arg) {
			{
				String reg = getRegister();
				emit("movl", "$0", reg);
				return reg;
			}
		}

		@Override
		public String thisRef(ThisRef ast, Void arg) {
			{
				String reg = getRegister();
				emitLoad(THIS_OFFSET, BP, reg);
				return reg;
			}
		}

		@Override
		public String methodCall(MethodCallExpr ast, Void arg) {

			{
				return sdg.methodCall(ast.sym, ast.allArguments());
			}
		}

		@Override
		public String unaryOp(UnaryOp ast, Void arg) {
			{
				String argReg = gen(ast.arg());
				switch (ast.operator) {
				case U_PLUS:
					break;

				case U_MINUS:
					{
						if (ast.type == main.floatType) {
							emitGprRegToFloatReg(FLOAT_REG_0, argReg);
							push("%eax");
							emit("movd", FLOAT_REG_0, "%eax");
							emit("xorl", "$2147483648", "%eax");
							emit("movd", "%eax", FLOAT_REG_0);
							pop("%eax");
							emitFloatRegToGprReg(argReg, FLOAT_REG_0);
						} else {
							emit("negl", argReg);
						}
					}
					break;

				case U_BOOL_NOT:
					emit("negl", argReg);
					emit("incl", argReg);
					break;
				}

				return argReg;
			}
		}

		@Override
		public String var(Var ast, Void arg) {
			{
				String reg = getRegister();
				switch (ast.sym.kind) {
				case LOCAL:
				case PARAM:
					assert ast.sym.offset != -1;
					emitLoad(ast.sym.offset, BP, reg);
					break;
				case FIELD:
					// These are removed by the ExprRewriter added to the
					// end of semantic analysis.
					throw new RuntimeException("Should not happen");
				}
				return reg;
			}
		}

	}

	/**
	 * Generates code to process statements and declarations.
	 */
	public class StmtDeclGenerator extends AstVisitor<String, Void> {

		public void gen(Ast ast) {
			visit(ast, null);
		}

		@Override
		public String visit(Ast ast, Void arg) {
			try {
				emitIndent("Emitting " + AstOneLine.toString(ast));
				return super.visit(ast, arg);
			} finally {
				emitUndent();
			}
		}
				
		public String methodCall(MethodSymbol mthSymbol, List<Expr> args) {
			
			// Push the arguments and the method prefix (caller save register,
			// and padding) onto the stack.
			// Note that the space for the arguments is not already reserved,
			// so we just push them in the Java left-to-right order.
			//
			// After each iteration of the following loop, reg holds the
			// register used for the previous argument.
			List<Expr> allArgs = args;
			
			int padding = emitCallPrefix(null, allArgs.size());
			
			String reg = null;
			for (int i = 0; i < allArgs.size(); i++) {				
				if (reg != null) {
					releaseRegister(reg);
				}
				reg = eg.gen(allArgs.get(i));
				push(reg);				
			}
			
			// Since "this" is the first parameter that push
			// we have to get it back to resolve the method call
			emitComment("Load \"this\" pointer");
			emitLoad((allArgs.size() - 1) * Config.SIZEOF_PTR, SP, reg);
						
			// Check for a null receiver
			int cnPadding = emitCallPrefix(null, 1);
			push(reg);
			emit("call", CHECK_NULL);
			emitCallSuffix(null, 1, cnPadding);
			
			// Load the address of the method to call into "reg"
			// and call it indirectly.
			emitLoad(0, reg, reg);
			int mthdoffset = 4 + mthSymbol.vtableIndex * Config.SIZEOF_PTR;
			emitLoad(mthdoffset, reg, reg);
			emit("call", "*" + reg);
			
			emitCallSuffix(reg, allArgs.size(), padding);
			
			if (mthSymbol.returnType == main.voidType) {
				releaseRegister(reg);
				return null;
			}
			
			return reg;
		
		}

		@Override
		public String methodCall(MethodCall ast, Void dummy) {
			{
				return methodCall(ast.sym, ast.allArguments());
			}

		}

		// Emit vtable for arrays of this class:
		@Override
		public String classDecl(ClassDecl ast, Void arg) {
			{
				// Emit each method:
				emitCommentSection("Class " + ast.name);
				return visitChildren(ast, arg);
			}
		}

		@Override
		public String methodDecl(MethodDecl ast, Void arg) {
			{
				emitMethodPrefix(ast);
				gen(ast.body());
				emitMethodSuffix(false);
				return null;
			}
		}

		@Override
		public String ifElse(IfElse ast, Void arg) {
			{
				String falseLbl = uniqueLabel();
				String doneLbl = uniqueLabel();

				genJumpIfFalse(ast.condition(), falseLbl);
				gen(ast.then());
				emit("jmp", doneLbl);
				emitLabel(falseLbl);
				gen(ast.otherwise());
				emitLabel(doneLbl);
				return null;
			}

		}

		@Override
		public String whileLoop(WhileLoop ast, Void arg) {

			{

				String nextLbl = uniqueLabel();
				String doneLbl = uniqueLabel();

				emitLabel(nextLbl);
				genJumpIfFalse(ast.condition(), doneLbl);
				gen(ast.body());
				emit("jmp", nextLbl);
				emitLabel(doneLbl);

				return null;
			}

		}

		@Override
		public String assign(Assign ast, Void arg) {

			{

				class AssignVisitor extends ExprVisitor<Void, Expr> {

					@Override
					public Void var(Var ast, Expr right) {
						final String rhsReg = eg.gen(right);
						emitStore(rhsReg, ast.sym.offset, BP);
						releaseRegister(rhsReg);
						return null;
					}

					@Override
					public Void field(Field ast, Expr right) {
						String objReg = eg.gen(ast.arg());
						int padding = emitCallPrefix(null, 1);
						push(objReg);
						emit("call", CHECK_NULL);
						emitCallSuffix(null, 1, padding);
						final String rhsReg = eg.gen(right);
						emitStore(rhsReg, ast.sym.offset, objReg);
						releaseRegister(objReg);
						releaseRegister(rhsReg);
						return null;
					}

					@Override
					public Void index(Index ast, Expr right) {
						String arrReg = eg.gen(ast.left());
						int padding = emitCallPrefix(null, 1);
						push(arrReg);
						emit("call", CHECK_NULL);
						emitCallSuffix(null, 1, padding);
						String idxReg = eg.gen(ast.right());
						final String rhsReg = eg.gen(right);
						emitMove(rhsReg, a(arrReg, idxReg));
						releaseRegister(arrReg);
						releaseRegister(idxReg);
						releaseRegister(rhsReg);

						return null;
					}

					@Override
					protected Void dfltExpr(Expr ast, Expr arg) {
						throw new RuntimeException(
								"Store to unexpected lvalue " + ast);
					}

				}
				new AssignVisitor().visit(ast.left(), ast.right());
				return null;
			}
		}

		@Override
		public String builtInWrite(BuiltInWrite ast, Void arg) {

			{
				String reg = eg.gen(ast.arg());
				int padding = emitCallPrefix(null, 1);
				push(reg);
				emit("call", PRINT_INTEGER);
				emitCallSuffix(null, 1, padding);
				releaseRegister(reg);
				return null;
			}
			
		}

		@Override
		public String builtInWriteFloat(BuiltInWriteFloat ast, Void arg) {

			{
				String reg = eg.gen(ast.arg());
				int padding = emitCallPrefix(null, 1);
				push(reg);
				emit("call", PRINT_FLOAT);
				emitCallSuffix(null, 1, padding);
				releaseRegister(reg);
				return null;
			}

		}

		@Override
		public String builtInWriteln(BuiltInWriteln ast, Void arg) {

			{
				int padding = emitCallPrefix(null, 0);
				emit("call", PRINT_NEW_LINE);
				emitCallSuffix(null, 0, padding);
				return null;
			}

		}

		@Override
		public String returnStmt(ReturnStmt ast, Void arg) {
			{
				if (ast.arg() != null) {
					String reg = eg.gen(ast.arg());
					emitMove(reg, "%eax");
					emitMethodSuffix(false);
					releaseRegister(reg);
				} else {
					emitMethodSuffix(true); // no return value -- return NULL as
											// a default (required for main())
				}
				return null;
			}
		}

	}

	// -------------------------------------------------------
	// EMIT CODE

	private StringBuilder indent = new StringBuilder();

	/** Creates an constant operand relative to another operand. */
	protected String c(int i) {
		return "$" + i;
	}

	/** Creates an constant operand with the address of a label. */
	protected String c(String lbl) {
		return "$" + lbl;
	}

	/** Creates an operand relative to another operand. */
	protected String o(int offset, String reg) {
		return String.format("%d(%s)", offset, reg);
	}

	/** Creates an operand addressing an item in an array */
	protected String a(String arrReg, String idxReg) {
		final int offset = Config.SIZEOF_PTR; // one word in front for vptr
		final int mul = Config.SIZEOF_PTR; // assume all arrays of 4-byte elem
		return String.format("%d(%s,%s,%d)", offset, arrReg, idxReg, mul);
	}

	protected void emitIndent(String comment) {
		this.indent.append("  ");
		if (comment != null)
			emitComment(comment);
	}

	protected void emitCommentSection(String name) {
		int indentLen = this.indent.length();
		int breakLen = 68 - indentLen - name.length();
		StringBuffer sb = new StringBuffer();
		sb.append(Config.COMMENT_SEP).append(" ");
		for (int i = 0; i < indentLen; i++)
			sb.append("_");
		sb.append(name);
		for (int i = 0; i < breakLen; i++)
			sb.append("_");

		try {
			out.write(sb.toString());
			out.write("\n");
		} catch (IOException e) {
		}
	}

	protected void emitComment(String comment) {
		emit(Config.COMMENT_SEP + " " + comment);
	}

	protected void emitUndent() {
		this.indent.setLength(this.indent.length() - 2);
	}

	protected void emit(String op, String src, String dest) {
		emit(String.format("%s %s, %s", op, src, dest));
	}

	public void emit(String op, int src, String dest) {
		emit(op, c(src), dest);
	}

	protected void emit(String op, String dest) {
		emit(op + " " + dest);
	}

	protected void emit(String op, int dest) {
		emit(op, c(dest));
	}

	protected void emitMove(String src, String dest) {
		if (!src.equals(dest))
			emit("movl", src, dest);
	}

	protected void emitLoad(int srcOffset, String src, String dest) {
		emitMove(o(srcOffset, src), dest);
	}

	protected void emitStore(String src, int destOffset, String dest) {
		emitMove(src, o(destOffset, dest));
	}

	protected void emitMoveFloat(String src, String dest) {
		if (!src.equals(dest))
			emit("movss", src, dest);
	}

	protected void emitMoveDouble(String src, String dest) {
		if (!src.equals(dest))
			emit("movsd", src, dest);
	}

	protected void emitLoadFloat(int srcOffset, String src, String dest) {
		emitMoveFloat(o(srcOffset, src), dest);
	}

	protected void emitStoreFloat(String src, int destOffset, String dest) {
		emitMoveFloat(src, o(destOffset, dest));
	}

	private void emitGprRegToFloatReg(String dest, String src) {
		push(src);
		emitLoadFloat(0, SP, dest);
		pop(Config.SIZEOF_PTR);
	}

	private void emitFloatRegToGprReg(String dest, String src) {
		push(c(0));
		emitStoreFloat(src, 0, SP);
		pop(dest);
	}

	protected void emitStoreDouble(String src, int destOffset, String dest) {
		emitMoveDouble(src, o(destOffset, dest));
	}

	protected void emitConstantData(String data) {
		emit(String.format("%s %s", Config.DOT_INT, data));
	}

	private int counter = 0;

	protected String uniqueLabel() {
		String labelName = "label" + counter++;
		return labelName;
	}

	protected void emitLabel(String main) {
		try {
			out.write(main + ":" + "\n");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	protected void emit(String op) {
		try {
			out.write(indent.toString());
			out.write(op);
			out.write("\n");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	protected String mthdlbl(MethodSymbol msym) {
		return msym.owner.name + "_" + msym.name;
	}

	protected void emitMethodPrefix(MethodDecl ast) {
				
		// Emit the label for the method:
		emit(Config.TEXT_SECTION);
		emitCommentSection(String.format("Method %s.%s", ast.sym.owner.name,
				ast.name));
		emit(".globl " + mthdlbl(ast.sym));
		emitLabel(mthdlbl(ast.sym));

		// Compute the size and layout of the stack frame. Our
		// frame looks like (the numbers are relative to our ebp):
		//
		// (caller's locals)
		// (padding)
		// arg 0 (this ptr)
		// ...
		// 12 arg N - 1
		// 8 arg N
		// 4 linkage ptr (return address)
		// 0 saved ebp
		// -4 locals
		// (callee's arguments + temporaries)
		//
		// We allocate on the stack during the course of 
		// a function call using push(...) and pop(...) instructions.
		//
		// Stack slots fall into several
		// categories:
		// - "Linkage": overhead for function calls.
		// This includes the return address and saved ebp.
		// - locals: these store the value of user-declared local
		// variables.
		// - temporaries: these are stack slots used to store
		// values during expression evaluation when we run out
		// of registers, saving caller-saved registers, and
		// other miscellaneous purposes.
		// - padding: only there to ensure the stack size is a multiple
		// of 16.
		// - arguments: values we will pass to functions being
		// invoked.
		//
		// We calculate all address relative to the base pointer.
		
		// Initialize method-specific data
		initMethodData();

		// Assign parameter offsets:
		// As shown above, these start from 8.
		// Being able to evaluate parameters like in Java
		// with left-to-right evaluation order they result 
		// on the stack in reversed order.
		// The "this" parameter is the first pushed on the stack
		// thus receiving higher offset.
		int paramOffset = Config.SIZEOF_PTR * 2;
		for (int i = ast.sym.parameters.size() - 1; i >= 0; i--) {
			final VariableSymbol param = ast.sym.parameters.get(i);
			assert param.offset == -1;
			param.offset = paramOffset;
			paramOffset += Config.SIZEOF_PTR;
		}
		THIS_OFFSET = paramOffset;
		paramOffset += Config.SIZEOF_PTR;
		
		// First few slots are reserved for caller save regs:
		int localSlot = callerSave.length * SIZEOF_REG;

		// Assign local variable offsets:
		emitComment(String.format("%-10s   Offset", "Variable"));
		for (VariableSymbol local : ast.sym.locals.values()) {
			assert local.offset == -1;
			local.offset = -localSlot;
			localSlot += Config.SIZEOF_PTR;
			emitComment(String.format("%-10s   %d", local, local.offset));
		}

		// Round up stack size to make it a multiple of 16.
		// The actual amount passed to the enter instruction is 8
		// less, however, because it wants to know the amount
		// in addition to the linkage ptr and saved ebp.
		int implicit = Config.SIZEOF_PTR * 2;
		int stackSize = (implicit + localSlot + 15) & 0xFFFFFFF0;
		stackSize -= implicit;

		emitComment(String.format("implicit=%d localSlot=%d sum=%d", implicit, localSlot, implicit + localSlot));

		emit(String.format("enter $%d, $0", stackSize));
		emit("and", -16, SP);
		
		storeCalleeSaveRegs();

	}

	protected void emitMethodSuffix(boolean returnNull) {
			if (returnNull)
				emit("movl", "$0", "%eax");
			restoreCalleeSaveRegs();
			emit("leave");
			emit("ret");
	}

}
